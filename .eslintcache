[{"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\index.js":"1","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\App.js":"2","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\reportWebVitals.js":"3","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\header.components.js":"4","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\menu.component.js":"5","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Login.Component.js":"6","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\dashboard.component.js":"7","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\test.component.js":"8","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\alarm-history.component.js":"9","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\site.config.component.js":"10","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\biousers.admin.component.js":"11","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\alarm-acknowledge.component.js":"12","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\discr.acknow.component.js":"13","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Services\\sacs.services.js":"14","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\http-common.js":"15","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\add.adminuser.component.js":"16","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\auditrail.component.js":"17","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\configreport.component.js":"18","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\visitors.report.component.js":"19","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\entryexit.report.component.js":"20","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\lineconfiguration.component.js":"21","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\checkList.component.js":"22"},{"size":1217,"mtime":1610816654494,"results":"23","hashOfConfig":"24"},{"size":6499,"mtime":1612890471439,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":4364,"mtime":1612938075496,"results":"27","hashOfConfig":"24"},{"size":19393,"mtime":1612894940169,"results":"28","hashOfConfig":"24"},{"size":5842,"mtime":1612887500341,"results":"29","hashOfConfig":"24"},{"size":53647,"mtime":1612865922867,"results":"30","hashOfConfig":"24"},{"size":7776,"mtime":1612882534658,"results":"31","hashOfConfig":"24"},{"size":14863,"mtime":1612852600356,"results":"32","hashOfConfig":"24"},{"size":11694,"mtime":1612872244251,"results":"33","hashOfConfig":"24"},{"size":30577,"mtime":1612870750082,"results":"34","hashOfConfig":"24"},{"size":11652,"mtime":1612865760374,"results":"35","hashOfConfig":"24"},{"size":7690,"mtime":1612865165706,"results":"36","hashOfConfig":"24"},{"size":5885,"mtime":1612937443022,"results":"37","hashOfConfig":"24"},{"size":1085,"mtime":1609163601143,"results":"38","hashOfConfig":"24"},{"size":22571,"mtime":1612886182189,"results":"39","hashOfConfig":"24"},{"size":13462,"mtime":1612930143845,"results":"40","hashOfConfig":"24"},{"size":12706,"mtime":1612851343424,"results":"41","hashOfConfig":"24"},{"size":13720,"mtime":1612852408394,"results":"42","hashOfConfig":"24"},{"size":17388,"mtime":1612852173111,"results":"43","hashOfConfig":"24"},{"size":18607,"mtime":1612888019369,"results":"44","hashOfConfig":"24"},{"size":15974,"mtime":1612937356292,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"1cgotj6",{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"49"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"49"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"49"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\index.js",["107"],"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n//import CurrenInUsers from \"./Components/curren-in-users.component\";\n\n//Socket IO Start\n// const express = require(\"express\");\n// const router = express.Router();\n// router.get(\"/\", (req, res) => {\n//   res.send({ response: \"I am alive\" }).status(200);\n// });\n//Socket IO Stop\n\n\n\n//module.exports = router;\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// class SACSDashboard extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return (\n//       <React.Fragment>\n//         <Bioreader></Bioreader>\n//         <CurrentInUsers></CurrentInUsers>\n//       </React.Fragment>\n//     )\n//   }\n// }\n// const elem = <SACSDashboard></SACSDashboard>\n// ReactDOM.render(elem, document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n",["108","109"],"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\App.js",["110"],"//import logo from './app-assets/images/logo/stack-logo-light.png';\nimport { Route, Link, Switch } from \"react-router-dom\";\n// import io from 'socket.io';\n//import './App.css';\n//const feather = require('feather-icons')\n// import React, { Component } from 'react';\n// import ReactDom from 'react-dom';\n\n//import featherfont from 'feather-icons-react';\n//import Pace from 'react-pace-progress'\nimport './app-assets/vendors/css/vendors.min.css';\nimport './app-assets/vendors/css/forms/icheck/icheck.css';\nimport './app-assets/vendors/css/forms/icheck/custom.css';\nimport './app-assets/vendors/css/charts/morris.css';\nimport './app-assets/vendors/css/extensions/unslider.css';\nimport './app-assets/vendors/css/weather-icons/climacons.min.css';\nimport './app-assets/vendors/css/charts/leaflet.css';\n\n\nimport './app-assets/css/bootstrap.css';\nimport './app-assets/css/bootstrap-extended.css';\n//import './app-assets/css/colors.css';\nimport './app-assets/css/components.css';\n\nimport './app-assets/css/core/menu/menu-types/horizontal-menu.css';\nimport './app-assets/css/core/colors/palette-gradient.css';\nimport './app-assets/css/core/colors/palette-climacon.css';\nimport '././app-assets/fonts/simple-line-icons/style.min.css';\nimport './app-assets/fonts/meteocons/style.min.css';\nimport './app-assets/css/pages/users.css';\n\nimport './assets/css/style.css';\n\n//import ReactDOM from 'react-dom';\n\n//import './app-assets/vendors/js/vendors.min.js';\n// import './app-assets/vendors/js/ui/jquery.sticky.js';\n// import './app-assets/vendors/js/charts/jquery.sparkline.min.js';\n// import './app-assets/vendors/js/charts/leaflet/leaflet.js';\n// import './app-assets/vendors/js/forms/icheck/icheck.min.js';\n// import './app-assets/vendors/js/extensions/jquery.knob.min.js';\n// import './app-assets/vendors/js/charts/raphael-min.js';\n// import './app-assets/vendors/js/charts/morris.min.js';\n// import './app-assets/vendors/js/charts/jquery.sparkline.min.js';\n// import './app-assets/vendors/js/extensions/unslider-min.js';\n// import './app-assets/vendors/js/charts/apexcharts/apexcharts.min.js';\n\n//import './app-assets/js/core/app-menu.js';\n// import './app-assets/js/core/app.js';\n\n// import './app-assets/js/scripts/ui/breadcrumbs-with-stats.js';\n// import './app-assets/js/scripts/pages/dashboard-fitness.js';\n\n\n// import CurrenInUsers from \"./Components/curren-in-users.component\";\n// import GetBioreaders from \"./Components/bio-readers.components\";\nimport HeaderComponent from './Components/header.components';\nimport DashboardComponent from './Components/dashboard.component';\nimport MenuComponent from './Components/menu.component';\nimport LoginComponent from './Components/Login.Component';\nimport OrderComponent from './Components/test.component';\nimport AlarmComponent from './Components/alarm-history.component';\nimport SiteConfig from \"./Components/site.config.component\";\nimport BioUsers from \"./Components/biousers.admin.component\";\nimport AlarmAck from \"./Components/alarm-acknowledge.component\";\nimport DiscrAck from \"./Components/discr.acknow.component\";\nimport AdminUserMngt from \"./Components/add.adminuser.component\";\n\n//Reports\nimport AuditReport from \"./Components/Reports/auditrail.component\";\nimport ConfigChangeReport from \"./Components/Reports/configreport.component\";\nimport VisitorsReport from \"./Components/Reports/visitors.report.component\";\nimport EntryExitReport from \"./Components/Reports/entryexit.report.component\";\nimport LineConfiguration from \"./Components/lineconfiguration.component\";\nimport CheckListConfig from \"./Components/checkList.component\";\n// Socket IO Start\n// const express = require(\"express\");\n// const http = require(\"http\");\n// const socketIo = require(\"socket.io\");\n\n// const port = process.env.PORT || 4001;\n// const index = require(\"./index\");\n\n// const app = express();\n// app.use(index);\n\n// const server = http.createServer(app);\n\n// const io = socketIo(server);\n\n// let interval;\n\n// io.on(\"connection\", (socket) => {\n//   console.log(\"New client connected\");\n//   if (interval) {\n//     clearInterval(interval);\n//   }\n//   interval = setInterval(() => getApiAndEmit(socket), 1000);\n//   socket.on(\"disconnect\", () => {\n//     console.log(\"Client disconnected\");\n//     clearInterval(interval);\n//   });\n// });\n\n// const getApiAndEmit = socket => {\n//   const response = new Date();\n//   // Emitting a new message. Will be consumed by the client\n//   socket.emit(\"FromAPI\", response);\n// };\n\n// server.listen(port, () => console.log(`Listening on port ${port}`));\n\n //Socket IO Stop\n\nfunction App() {\n\n  return (\n\n    <div className=\"horizontal-layout horizontal-menu 2-columns \" data-open=\"hover\" data-menu=\"horizontal-menu\" data-col=\"2-columns\">\n      <HeaderComponent></HeaderComponent>\n      {/* <CurrenInUsers></CurrenInUsers>\n      <GetBioreaders></GetBioreaders> */}\n      <MenuComponent></MenuComponent>\n      {/* <DashboardComponent></DashboardComponent> */}\n      <div className=\"\">\n        <Switch>\n          <Route exact path={[\"/\", \"/Dashboard\"]} component={DashboardComponent} />\n          <Route exact path={[\"/Dashboard\"]} component={DashboardComponent} />\n          <Route exact path={[\"/Alarm\"]} component={AlarmComponent} ></Route>\n          <Route exact path={[\"/BioUsers\"]} component={BioUsers}></Route>\n          <Route exact path={[\"/SiteConfig\"]} component={SiteConfig}></Route>\n          <Route exact path={[\"/AlarmAck\"]} component={AlarmAck}></Route>\n          <Route exact path={[\"/DiscrAck\"]} component={DiscrAck}></Route>\n          <Route exact path={[\"/AddUser\"]} component={AdminUserMngt}></Route>\n          {/* <Route exact path={[\"/test\"]} component={OrderComponent} ></Route> */}\n          <Route exact path={[\"/Login\"]} component={LoginComponent} ></Route>\n          <Route exact path={[\"/ConfigReport\"]} component={ConfigChangeReport} ></Route>\n          <Route exact path={[\"/Auditreport\"]} component={AuditReport}></Route>\n          <Route exact path={[\"/VisitorsReport\"]} component={VisitorsReport}></Route>\n          <Route exact path={[\"/EntryExitReport\"]} component={EntryExitReport}></Route>\n          <Route exact path={[\"/LineConfig\"]} component={LineConfiguration}></Route>\n          <Route exact path={[\"/CheckListConfig\"]} component={CheckListConfig}></Route>\n        \n          <Route exact path={[\"/test\"]} component={OrderComponent} ></Route>\n          \n          {/* <Route path=\"/tutorials/:id\" component={Tutorial} /> */}\n        </Switch>\n      </div>\n    </div>\n  );\n\n}\n\n\nexport default App;\n\n","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\reportWebVitals.js",[],"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\header.components.js",["111","112","113","114","115","116"],"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\menu.component.js",["117","118","119","120","121","122","123"],"import React from 'react';\r\nimport SACSDataServices from \"../Services/sacs.services\";\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Dropdown, Nav, Navbar, NavDropdown, Form,FormControl, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAddressCard, faHome, faAngleDown, faCogs, faUsersCog, faFileAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default class Menus extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveSACSServerStatus = this.retriveSACSServerStatus.bind(this);\r\n        this.state = {\r\n            Menus: [],\r\n            Server: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.timer = setInterval(() => {\r\n            this.retriveSACSServerStatus();\r\n        }, 6000);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    retriveSACSServerStatus() {\r\n        SACSDataServices.GetAllSACSServerStatus().then(response => {\r\n            // alert(JSON.stringify( response.data))\r\n            this.setState({\r\n                Server: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header-navbar navbar-expand-sm navbar navbar-horizontal navbar-fixed navbar-light navbar-without-dd-arrow navbar-shadow menu-border\"\r\n                role=\"navigation\" data-menu=\"menu-wrapper\">\r\n                <div className=\"navbar-container main-menu-content col-md-7\" data-menu=\"menu-container\">\r\n                    <ul className=\"nav navbar-nav\" id=\"main-menu-navigation\" data-menu=\"menu-navigation\">\r\n                        {/* <Link to={\"/Dashboard\"} className=\"dropdown-toggle nav-link btn\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"dropdown\">\r\n                                <FontAwesomeIcon icon={faHome}></FontAwesomeIcon>\r\n                                <span data-i18n=\"Dashboard\">Dashboard</span>\r\n                            </li>\r\n                        </Link> */}\r\n                        {/* <Dropdown>\r\n                            <Dropdown.Toggle href=\"/Dashboard\" variant=\"\" id=\"basic\">\r\n                                Dashboard\r\n                            </Dropdown.Toggle>                            \r\n                        </Dropdown> */}\r\n                        <Navbar bg=\"\" expand=\"lg\">\r\n                           \r\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                                <Nav className=\"mr-auto\">\r\n                                    <Nav.Link href=\"/Dashboard\"><FontAwesomeIcon icon={faHome}></FontAwesomeIcon> Dashboard</Nav.Link>                                    \r\n                                    <NavDropdown title={<span><FontAwesomeIcon icon={faFileAlt}></FontAwesomeIcon> Reports <FontAwesomeIcon icon={faAngleDown}></FontAwesomeIcon> </span> }\r\n                                     id=\"basic-nav-dropdown\">\r\n                                        <NavDropdown.Item href=\"/Auditreport\"> Audit Trail</NavDropdown.Item>\r\n                                        <NavDropdown.Item href=\"/ConfigReport\">Config Change</NavDropdown.Item>\r\n                                        <NavDropdown.Item href=\"/EntryExitReport\">Entry/Exit</NavDropdown.Item>\r\n                                        <NavDropdown.Item href=\"/VisitorsReport\">Visitors</NavDropdown.Item>\r\n                                        <NavDropdown.Item href=\"/Alarm\">Alarm History</NavDropdown.Item>\r\n                                        <NavDropdown.Divider />                                                                               \r\n                                    </NavDropdown>\r\n                                    \r\n                                    <NavDropdown title={<span><FontAwesomeIcon icon={faCogs}></FontAwesomeIcon> Configurations <FontAwesomeIcon icon={faAngleDown}></FontAwesomeIcon></span> } id=\"basic-nav-dropdown\">                                     \r\n                                        <NavDropdown.Item href=\"/SiteConfig\"> Site Configurations</NavDropdown.Item>\r\n                                        <NavDropdown.Item href=\"/LineConfig\"> Line Configurations</NavDropdown.Item>  \r\n                                        <NavDropdown.Item href=\"/CheckListConfig\"> Checklist Configurations</NavDropdown.Item>                                       \r\n                                        <NavDropdown.Divider />                                                                              \r\n                                    </NavDropdown>\r\n                                    {/* // Users Management */}\r\n                                    <NavDropdown title={<span><FontAwesomeIcon icon={faUsersCog}></FontAwesomeIcon> Users Managemet <FontAwesomeIcon icon={faAngleDown}></FontAwesomeIcon> </span> } id=\"basic-nav-dropdown\">\r\n                                        <NavDropdown.Item href=\"/BioUsers\">Bio Users</NavDropdown.Item>\r\n                                        <NavDropdown.Item href=\"/AddUser\">Add Admin Usres</NavDropdown.Item>\r\n                                       \r\n                                        <NavDropdown.Divider />                                       \r\n                                    </NavDropdown>\r\n                                </Nav>                                \r\n                            </Navbar.Collapse>\r\n                        </Navbar>\r\n\r\n                        {/* <Nav.Link href=\"/Dashboard\">Dashboard</Nav.Link>\r\n                        <Link to={\"\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"test\">\r\n\r\n                                <span data-i18n=\"OrderComponent\"></span>\r\n                            </li>\r\n                        </Link> */}\r\n                        {/* <Dropdown>\r\n                            <Dropdown.Toggle variant=\"\" id=\"dropdown-basic\">\r\n                                Reports\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item href=\"/Auditreport\">Audit Trail</Dropdown.Item>\r\n                                <Dropdown.Item href=\"/ConfigReport\">Config Change</Dropdown.Item>\r\n                                <Dropdown.Item href=\"/EntryExitReport\">Entry/Exit</Dropdown.Item>\r\n                                <Dropdown.Item href=\"/VisitorsReport\">Visitors</Dropdown.Item>\r\n                                <Dropdown.Item href=\"/Alarm\">Alarm History</Dropdown.Item>\r\n\r\n                            </Dropdown.Menu>\r\n                        </Dropdown> */}\r\n                        {/* <Link to={\"/Dashboard\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"dropdown\">\r\n                                <FontAwesomeIcon icon={faAddressCard}></FontAwesomeIcon>\r\n                                <span data-i18n=\"Dashboard\">Reports</span>\r\n                            </li>\r\n                        </Link> */}\r\n                        {/* <Link to={\"/Alarm\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"test\">\r\n                                <FontAwesomeIcon icon={faAddressCard}></FontAwesomeIcon>\r\n                                <span data-i18n=\"OrderComponent\">Alarm</span>\r\n                            </li>\r\n                        </Link> */}\r\n                        {/* <Link to={\"/Alarm\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"test\">\r\n\r\n                                <span data-i18n=\"OrderComponent\"></span>\r\n                            </li>\r\n                        </Link> */}\r\n                        {/* <Dropdown>\r\n                            <Dropdown.Toggle variant=\"\" id=\"dropdown-basic\">\r\n                                Configurations\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item href=\"/SiteConfig\">Site Configurations</Dropdown.Item>\r\n                                <Dropdown.Item href=\"/LineConfig\"> Line Configurations </Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown> */}\r\n                        {/* <Link to={\"/SiteConfig\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"site\">\r\n                                <FontAwesomeIcon icon={faAddressCard}></FontAwesomeIcon>\r\n                                <span data-i18n=\"OrderComponent\">Site Configuration</span>\r\n                            </li>\r\n                        </Link> */}\r\n                        {/* <Link to={\"/Alarm\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"test\">\r\n                                <span data-i18n=\"OrderComponent\"></span>\r\n                            </li>\r\n                        </Link> */}\r\n                        {/* <Dropdown>\r\n                            <Dropdown.Toggle variant=\"\" id=\"dropdown-basic\">\r\n                                Users Management\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item href=\"/BioUsers\">Bio Users</Dropdown.Item>\r\n                                <Dropdown.Item href=\"/AddUser\">Add Admin Usres</Dropdown.Item>\r\n                               \r\n                            </Dropdown.Menu>\r\n                        </Dropdown> */}\r\n                        {/* <Link to={\"/BioUsers\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"test\">\r\n                                <FontAwesomeIcon icon={faAddressCard}></FontAwesomeIcon>\r\n                                <span data-i18n=\"BioUsers\">Bio Usres</span>\r\n                            </li>\r\n                        </Link>\r\n                        <Link to={\"/AddUser\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"test\">\r\n                                <FontAwesomeIcon icon={faAddressCard}></FontAwesomeIcon>\r\n                                <span data-i18n=\"BioUsers\">Add Usres</span>\r\n                            </li>\r\n                        </Link>\r\n                        <Link to={\"/test\"} className=\"dropdown-toggle nav-link\"\r\n                            data-toggle=\"dropdown\">\r\n                            <li className=\"dropdown nav-item\" data-menu=\"test\">\r\n                                <FontAwesomeIcon icon={faAddressCard}></FontAwesomeIcon>\r\n                                <span data-i18n=\"OrderComponent\">Test</span>\r\n                            </li>\r\n                        </Link> */}\r\n\r\n                    </ul>\r\n                </div>\r\n                <div className=\"navbar-container main-menu-content col-md-6\" data-menu=\"menu-container\" style={{ paddingTop: '9px' }}>\r\n                    {\r\n                        this.state.Server.map(ser => (\r\n                            ser.code === \"MainEventServerVisible\" ?\r\n                                <div style={{ display: 'inline-block' }}>\r\n                                    {ser.nDurationDifference >= 3000 ?\r\n                                        <div class=\"btn-group mr-1 mb-1\">\r\n                                            <button type=\"button\" class=\"btn btn-outline-danger blink\">BioMetric</button>\r\n                                            <button type=\"button\" class=\"btn btn-danger blink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                Offline\r\n                                            </button>\r\n                                        </div> :\r\n                                        <div class=\"btn-group mr-1 mb-1\">\r\n                                            <button type=\"button\" class=\"btn btn-outline-success\">BioMetric</button>\r\n                                            <button type=\"button\" class=\"btn btn-success\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                Online\r\n                                            </button>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                : ser.code === \"PLCServerVisible\" ?\r\n                                    <div style={{ display: 'inline-block' }}>\r\n                                        {ser.nDurationDifference >= 3000 ?\r\n                                            <div class=\"btn-group mr-1 mb-1\">\r\n                                                <button type=\"button\" class=\"btn btn-outline-danger blink\">PLC</button>\r\n                                                <button type=\"button\" class=\"btn btn-danger blink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                    Offline\r\n                                            </button>\r\n                                            </div> :\r\n                                            <div class=\"btn-group mr-1 mb-1\">\r\n                                                <button type=\"button\" class=\"btn btn-outline-success\">PLC</button>\r\n                                                <button type=\"button\" class=\"btn btn-success\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                    Online\r\n                                            </button>\r\n                                            </div>\r\n                                        }\r\n                                    </div >\r\n                                    : ser.code === \"VoiceAlertsServer\" ?\r\n                                        <div style={{ display: 'inline-block' }}>\r\n                                            {ser.nDurationDifference >= 3000 ?\r\n                                                <div class=\"btn-group mr-1 mb-1\">\r\n                                                    <button type=\"button\" class=\"btn btn-outline-danger blink\">Voice</button>\r\n                                                    <button type=\"button\" class=\"btn btn-danger blink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                        Offline\r\n                                            </button>\r\n                                                </div> :\r\n                                                <div class=\"btn-group mr-1 mb-1\">\r\n                                                    <button type=\"button\" class=\"btn btn-outline-success\">Voice</button>\r\n                                                    <button type=\"button\" class=\"btn btn-success\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                        Online\r\n                                            </button>\r\n                                                </div>\r\n                                            }\r\n                                        </div>\r\n                                        : ser.code === \"MiscServer\" ?\r\n                                            <div style={{ display: 'inline-block' }}>\r\n                                                {ser.nDurationDifference >= 3000 ?\r\n                                                    <div class=\"btn-group mr-1 mb-1\">\r\n                                                        <button type=\"button\" class=\"btn btn-outline-danger blink\">Backup</button>\r\n                                                        <button type=\"button\" class=\"btn btn-danger blink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                            Offline\r\n                                            </button>\r\n                                                    </div> :\r\n                                                    <div class=\"btn-group mr-1 mb-1\">\r\n                                                        <button type=\"button\" class=\"btn btn-outline-success\">Backup</button>\r\n                                                        <button type=\"button\" class=\"btn btn-success\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                            Online\r\n                                            </button>\r\n                                                    </div>\r\n                                                }\r\n                                            </div>\r\n                                            : <div></div>\r\n                        ))\r\n                    }\r\n                    {/* <div class=\"btn-group mr-1 mb-1\">\r\n                        <button type=\"button\" class=\"btn btn-outline-danger\">BioMetric</button>\r\n                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            <span class=\"sr-only\">Toggle Dropdown</span>\r\n                        </button>\r\n                    </div> */}\r\n                    {/* <div class=\"btn-group mr-1 mb-1\">\r\n                        <button type=\"button\" class=\"btn btn-outline-danger\">PLC</button>\r\n                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            <FontAwesomeIcon icon={faAngleDown}></FontAwesomeIcon>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"btn-group mr-1 mb-1\">\r\n                        <button type=\"button\" class=\"btn btn-outline-danger\">Voice Alert</button>\r\n                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            <span class=\"sr-only\">Toggle Dropdown</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"btn-group mr-1 mb-1\">\r\n                        <button type=\"button\" class=\"btn btn-outline-danger\">Backup</button>\r\n                        <button type=\"button\" class=\"btn btn-danger\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            <span class=\"sr-only\">Toggle Dropdown</span>\r\n                        </button>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Login.Component.js",["124","125","126","127"],"import React from 'react';\r\n// import {useFormik} from 'formik';\r\n// import FeatherIcon from 'feather-icons-react';\r\n// import * as Icon from 'feather-icons-react';\r\n// import logo from '../app-assets/images/logo/logo-org.png';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faKey } from '@fortawesome/free-solid-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport SACSDataServices from \"../Services/sacs.services\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class LoginComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            UserId: \"\",\r\n            Password: \"\",\r\n            ActionName: \"Login\",\r\n            loginErrors: \"\",\r\n            Alert: \"none\"\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event) {\r\n        //alert(hi);\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n            // email: event.target.value,\r\n            // password: event.target.value,\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n\r\n        const { UserId, Password } = this.state;\r\n        //alert(this.state.email);\r\n        var data = {\r\n            UserId: this.state.UserId,\r\n            Password: this.state.Password\r\n        };\r\n        //alert(JSON.stringify(data));\r\n\r\n        SACSDataServices.CheckUserskLogin(data).then(response => {\r\n\r\n            if (response.data == \"Success\") {\r\n                //alert(response.data)\r\n                this.setState({ ActionName: \"Logout\" });\r\n                return <Redirect to='/dashboard' />\r\n            }\r\n            else {\r\n                this.setState({\r\n                    loginErrors: response.data,\r\n                    Alert: \"\"\r\n                })\r\n            }\r\n            // if (response.data.logged_in) {\r\n            //     this.props.handleSuccessfulAuth(response.data);\r\n            //   }\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(\"login error\", e);\r\n            alert(JSON.stringify(e));\r\n        });\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n        return (\r\n            <section className=\"row flexbox-container\" style={{ paddingTop: \"20px\" }}>\r\n                <div className=\"col-12 d-flex align-items-center justify-content-center\">\r\n                    <div className=\"col-lg-4 col-md-8 col-10 box-shadow-2 p-0\">\r\n                        <div className=\"card border-grey border-lighten-3 m-0\">\r\n                            <div className=\"card-header border-0\">\r\n\r\n                                <div className=\"card-title text-center\" >\r\n                                    {/* <div className=\"p-1\"><img  src={logo} style={{maxHeight:\"50px\"}}  alt=\"branding logo\"></img></div> */}\r\n                                    <h1 className=\"card-subtitle line-on-side text-muted text-center font-small-4 pt-2\">\r\n                                        <span>Login</span></h1>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={e => e.preventDefault()} className=\"form-horizontal form-simple\"  >\r\n                                        <fieldset className=\"form-group position-relative has-icon-left mb-0\">\r\n                                            <input type=\"text\" onChange={this.handleChange}\r\n                                                className=\"form-control form-control-lg\" autoComplete=\"false\"\r\n                                                id=\"UserId\" name=\"UserId\" placeholder=\"Your Username\" required></input>\r\n                                            <div className=\"form-control-position\">\r\n                                                <FontAwesomeIcon icon={faUser}></FontAwesomeIcon>\r\n                                            </div>\r\n                                        </fieldset>\r\n                                        <br></br>\r\n                                        <fieldset className=\"form-group position-relative has-icon-left\">\r\n                                            <input type=\"password\" className=\"form-control form-control-lg\"\r\n                                                autoComplete=\"false\" id=\"Password\" name=\"Password\"\r\n                                                onChange={this.handleChange} placeholder=\"Enter Password\" required></input>\r\n                                            <div className=\"form-control-position\">\r\n                                                <FontAwesomeIcon icon={faKey} ></FontAwesomeIcon>\r\n                                            </div>\r\n                                        </fieldset>\r\n\r\n                                        <div className={this.state.loginErrors != \"Success\" ? \"alert alert-danger\" : \"alert alert-success\"} role=\"alert\" style={{ display: this.state.Alert }}>\r\n                                            <span className=\"text-bold-600 text-center\">{this.state.loginErrors}</span>\r\n                                        </div>\r\n\r\n                                        <button type=\"submit\" onClick={this.handleSubmit} className=\"btn btn-primary btn-lg btn-block\">\r\n                                            <FontAwesomeIcon icon={faLock}></FontAwesomeIcon> Login</button>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\dashboard.component.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"import React from 'react';\r\nimport SACSDataServices from \"../Services/sacs.services\";\r\nimport moment from \"moment\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n//const [lineid, selectedLineID] = useState(0);\r\nclass PageHeader extends React.PureComponent {\r\n    handle = null;\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveAllLinesDate = this.retriveAllLinesDate.bind(this);\r\n        this.retrieveBioreaders = this.retrieveBioreaders.bind(this);\r\n        this.retriveMaxCountDetails = this.retriveMaxCountDetails.bind(this);\r\n        this.retrieveCurrentInUsers = this.retrieveCurrentInUsers.bind(this);\r\n        this.retrieveBioreaders = this.retrieveBioreaders.bind(this);\r\n        this.retriveGetAllHMIStatus = this.retriveGetAllHMIStatus.bind(this);\r\n        this.retriveDoorsByLineID = this.retriveDoorsByLineID.bind(this);\r\n        this.retriveAllComandByLineID = this.retriveAllComandByLineID.bind(this);\r\n        this.state = {\r\n            Lines: [],\r\n            LineId: 1,\r\n            users: [],\r\n            bioreader: [],\r\n            HMIs: [],\r\n            Doors: [],\r\n            Commands: [],\r\n            Alerts: [],\r\n            MaxCount: \"\",\r\n            CurrentCount: \"\",\r\n            SelectedLineID: 0,\r\n            SelectedLineName: \"Sterile Corridor\",\r\n            CommandEvent: \"\",\r\n            ShowBioreader: \"\",\r\n            ShowHMIStstus: \"none\",\r\n            ShowSubLine: \"\",\r\n            isCommandOpen: false,\r\n            CommendAlerts: \"none\",\r\n            CommandMessage:\"\",\r\n            CommandId: \"\",\r\n            Remarks:\"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.retriveAllLinesDate();\r\n        this.retriveDoorsByLineID();\r\n        this.retriveAllComandByLineID();\r\n        this.handle = this.timer = setInterval(() => {\r\n            this.retrieveBioreaders();\r\n            this.retriveGetAllHMIStatus();\r\n            this.retriveDashboardAlert();\r\n            if (this.state.SelectedLineID > 0) {\r\n                //alert(this.state.SelectedLineID);\r\n                this.retriveUsersandCurrentandMaxCountDetails(this.state.SelectedLineID);\r\n\r\n            }\r\n            else {\r\n                this.retrieveCurrentInUsers();\r\n                this.retriveMaxCountDetails();\r\n                this.retriveDoorsByLineID();\r\n                this.retriveAllComandByLineID();\r\n            }\r\n        }, 1000);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    retriveAllLinesDate() {\r\n        SACSDataServices.GetALlLines().then(response => {\r\n            this.setState({\r\n                Lines: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    retriveMaxCountDetails() {\r\n        SACSDataServices.UpdateUIConfiguration(1).then(response => {\r\n            this.setState({\r\n                MaxCount: response.data.m_nMaxCount,\r\n                CurrentCount: response.data.m_nCurrentCount\r\n            });\r\n            console.log(response.data);\r\n        })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    retriveDoorsByLineID() {\r\n        SACSDataServices.LoadDoorStatusPoints(1).then(response => {\r\n\r\n            this.setState({\r\n                Doors: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveAllComandByLineID() {\r\n        SACSDataServices.LoadLineCommandPoints(1).then(response => {\r\n\r\n            this.setState({\r\n                Commands: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveDashboardAlert() {\r\n        SACSDataServices.GetDashboardAlert().then(response => {\r\n            this.setState({\r\n                Alerts: response.data\r\n            });\r\n        }).catch(e => {\r\n\r\n        });\r\n    }\r\n    retrieveCurrentInUsers() {\r\n        SACSDataServices.GetAllCurrentInUsers().then(response => {\r\n\r\n            this.setState({\r\n                users: response.data\r\n            });\r\n            console.log(response.data);\r\n        })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    retrieveBioreaders() {\r\n        SACSDataServices.GetBioReaders()\r\n            .then(response => {\r\n                this.setState({\r\n                    bioreader: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    retriveGetAllHMIStatus() {\r\n        SACSDataServices.GetAllHMIStatus().then(response => {\r\n            this.setState({\r\n                HMIs: response.data\r\n            });\r\n            console.log(response.data);\r\n        })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    retriveUsersandCurrentandMaxCountDetails() {\r\n        SACSDataServices.GetAllUsersByLineId(this.state.SelectedLineID).then(response => {\r\n            this.setState({\r\n                users: response.data,\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        SACSDataServices.UpdateUIConfiguration(this.state.SelectedLineID).then(response => {\r\n            this.setState({\r\n                MaxCount: response.data.m_nMaxCount,\r\n                CurrentCount: response.data.m_nCurrentCount\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        SACSDataServices.LoadDoorStatusPoints(this.state.SelectedLineID).then(response => {\r\n\r\n            this.setState({\r\n                Doors: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        SACSDataServices.LoadLineCommandPoints(this.state.SelectedLineID).then(response => {\r\n\r\n            this.setState({\r\n                Commands: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    onChange = event => {\r\n      //  alert(event.target.value)\r\n        event.preventDefault();\r\n        this.setState({\r\n            SelectedLineName: event.nativeEvent.target[event.target.value - 1].text,\r\n            LineId: event.target.value,\r\n        });\r\n        SACSDataServices.GetAllUsersByLineId(event.target.value).then(response => {\r\n            this.setState({\r\n                users: response.data,\r\n                SelectedLineID: event.target.value,\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        SACSDataServices.UpdateUIConfiguration(event.target.value).then(response => {\r\n            this.setState({\r\n                MaxCount: response.data.m_nMaxCount,\r\n                CurrentCount: response.data.m_nCurrentCount\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        SACSDataServices.LoadDoorStatusPoints(event.target.value).then(response => {\r\n            this.setState({\r\n                Doors: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        if (event.target.value > 1) {\r\n            this.setState({ ShowSubLine: \"none\" })\r\n        }\r\n        else {\r\n            this.setState({ ShowSubLine: \"\" })\r\n        }\r\n\r\n    }\r\n    OnCommandRowClick = (e) => {\r\n\r\n        this.setState({\r\n            CommandEvent: e.target.value\r\n        })\r\n        e.preventDefault();\r\n\r\n    }\r\n    onClickLineAreaCommand = (e) => {\r\n        SACSDataServices.GetCommandNameByCommandId(e.target.value).then(response => {\r\n            this.setState({\r\n                CommandEvent: response.data,\r\n                CommandId: e.target.value,\r\n                Remarks:\"\"\r\n            })\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        this.openAckIndModal()\r\n    }\r\n    showToBioReader = () => {\r\n        this.setState({\r\n            ShowHMIStstus: \"none\",\r\n            ShowBioreader: \"\"\r\n        })\r\n    }\r\n    showToHMIStatus = () => {\r\n        this.setState({\r\n            ShowBioreader: \"none\",\r\n            ShowHMIStstus: \"\"\r\n        })\r\n    }\r\n    openAckIndModal = () => {\r\n        this.setState({\r\n            isCommandOpen: true,\r\n            CommendAlerts: \"none\"\r\n        })\r\n    }\r\n    handleSaveCommand = () => {\r\n       \r\n        if ((this.state.Remarks == null || this.state.Remarks == \"\")  )\r\n            return false;\r\n        SACSDataServices.SaveCommand(this.state.CommandId, \"ADMIN123\", this.state.Remarks).then(response => {\r\n            if (response.data === \"Ok\") {\r\n                this.setState({\r\n                    CommendAlerts: \"\",\r\n                    CommandMessage:\"Command Saved Successfully\",\r\n                    Remarks:\"\"\r\n                })\r\n            }\r\n            else if(response.data != \"Ok\" && response.data.minLength>1) {\r\n                this.setState({\r\n                    CommendAlerts: response.data,\r\n                    CommandMessage:response.data,\r\n                })\r\n            }\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    closeAckIndModal = () => this.setState({ isCommandOpen: false, CommendAlerts: \"none\",Remarks:\"\" });\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row grouped-multiple-statistics-card\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-lg-6 col-xl-3 col-sm-6 col-12\">\r\n                                        <div className=\"d-flex align-items-start mb-sm-1 mb-xl-0 border-right-blue-grey border-right-lighten-5\">\r\n                                            <div className=\"stats-amount col-md-12\">\r\n                                                <h5 className=\"heading-text text-bold-600\">Select Line</h5>\r\n                                                <select id=\"ddlLines\" name=\"ddlLines\"\r\n                                                    // value={this.state.Lines.find(obj => obj.value === selectedValue)}\r\n                                                    // defaultValue={this.state.selectValue}\r\n                                                    onChange={this.onChange}\r\n                                                    className=\"form-control col-md-12\">\r\n                                                    {\r\n                                                        this.state.Lines.map(lines => (\r\n                                                            <option className=\"\" value={lines.id}>\r\n                                                                {lines.lineName}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                </select>\r\n                                            </div>\r\n                                            {/* <p>{selectedValue}</p> */}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 col-xl-3 col-sm-6 col-12\">\r\n                                        <div className=\"d-flex align-items-start mb-sm-1 mb-xl-0 border-right-blue-grey border-right-lighten-5\">\r\n                                            <span className=\"card-icon danger d-flex justify-content-center\">\r\n                                                <i className=\"icon p-1 icon-pie-chart customize-icon font-large-2 p-1\"></i>\r\n                                            </span>\r\n                                            <div className=\"stats-amount col-md-10\">\r\n                                                <h4 className=\"heading-text text-bold-600\"> {this.state.CurrentCount}</h4>\r\n                                                <h5 className=\"sub-heading text-bold-600\"> {this.state.MaxCount}</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 col-xl-3 col-sm-6 col-12\">\r\n                                        <div className=\"d-flex align-items-start border-right-blue-grey border-right-lighten-5\">\r\n                                            <span className=\"card-icon success d-flex justify-content-center\">\r\n                                                <i className=\"icon p-1 icon-graph customize-icon font-large-2 p-1\"></i>\r\n                                            </span>\r\n                                            <div className=\"stats-amount mr-3\">\r\n                                                <br></br>\r\n                                                {\r\n                                                    this.state.Alerts.discrepanciesCount == 0 ?\r\n                                                        <button onClick={event => window.location.href = '/DiscrAck'} className=\"btn btn-success\">Acknowledge Discrepancies</button>\r\n                                                        :\r\n                                                        <button onClick={event => window.location.href = '/DiscrAck'} className=\"btn btn-danger blink\">Acknowledge Discrepancies</button>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 col-xl-3 col-sm-6 col-12\">\r\n                                        <div className=\"d-flex align-items-start\">\r\n                                            <span className=\"card-icon warning d-flex justify-content-center\">\r\n                                                <i className=\"icon p-1 icon-action-redo customize-icon font-large-2 p-1\"></i>\r\n                                            </span>\r\n                                            <div className=\"stats-amount mr-3\">\r\n                                                <br></br>\r\n                                                {\r\n                                                    this.state.Alerts.activeAlarmCount == 0 ?\r\n                                                        <button onClick={event => window.location.href = '/AlarmAck'} className=\"btn btn-success\">Active Alarms for All Lines</button>\r\n                                                        :\r\n                                                        <button onClick={event => window.location.href = '/AlarmAck'} className=\"btn btn-danger blink\">Active Alarms for All Lines</button>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row minimal-modern-charts\">\r\n                    <div className=\"col-xxl-6 col-xl-8 col-lg-8 col-md-12 col-12 power-consumption-stats-chart\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content pt-2 px-1\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-8 d-flex\">\r\n                                        <div className=\"ml-1\">\r\n                                            <h4 className=\"power-consumption-stats-title text-bold-500\">\r\n                                                Currently In Users in Selected Area/Line</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-4 d-flex justify-content-end pr-3\">\r\n                                        <div className=\"dark-text\">\r\n                                            <h4 className=\"power-consumption-active-tab text-bold-500\">{this.state.SelectedLineName}</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div id=\"spline-chart\">\r\n                                    <div className=\"table-responsive\" style={{ maxHeight: \"330px\" }}>\r\n                                        <table className=\"table\">\r\n                                            <thead className=\"\">\r\n                                                <tr>\r\n                                                    <th>EID</th>\r\n                                                    <th style={{ display: this.state.ShowSubLine }}>Sub Line Name</th>\r\n                                                    <th>User Name</th>\r\n                                                    <th>Entry Time</th>\r\n                                                    <th>Door Status</th>\r\n                                                    <th>Duration</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {\r\n                                                    this.state.users.map(usr => (\r\n                                                        <tr key={usr.userEID} style={{ backgroundColor: usr.rowColour }}>\r\n                                                            <td>{usr.userEID}</td>\r\n                                                            <td style={{ display: this.state.ShowSubLine }}>{usr.subLineName}</td>\r\n                                                            <td>{usr.userName}</td>\r\n                                                            <td>{moment(usr.inTime).format(\"HH:mm:ss\")}</td>\r\n                                                            <td>{usr.doorStatus}</td>\r\n                                                            <td>{usr.duration}</td>\r\n                                                        </tr>\r\n                                                    ))}\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-xxl-3 col-xl-4 col-lg-4 col-md-6 col-12 tracking-stats-chart\" >\r\n                        <div className=\"card chart-with-tabs\">\r\n                            <div className=\"card-content\">\r\n                                <ul className=\"nav nav-pills card-tabs pl-2 border-bottom-blue-grey border-bottom-lighten-5\" id=\"pills-tab\" role=\"tablist\">\r\n                                    <li className=\"nav-item\">\r\n                                        <a> <h4 className=\"nav-link text-primary bg-transparent active px-0 mr-1 py-1\"\r\n                                            id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\"\r\n                                            role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">Door Status/Line Commands</h4></a>\r\n                                    </li>\r\n                                </ul>\r\n                                <div className=\"tab-content\" id=\"pills-tabContent\" >\r\n                                    <div class=\"tracking-tab-container px-2\" >\r\n                                        <div class=\"tracking-tab-content\">\r\n                                            <div class=\"top-content d-flex flex-wrap justify-content-start\" style={{ maxHeight: \"450px\" }}>\r\n                                                <div class=\"pb-75\">\r\n                                                    <h5 class=\"tracking-tab-title mb-0 text-bold-600\">Door Status</h5>\r\n                                                    <table>\r\n                                                        <tbody>\r\n                                                            <tr>\r\n                                                                {\r\n                                                                    this.state.Doors.map(door => (\r\n                                                                        <button className=\"btn badge badge-pill badge-success px-1 py-50\"\r\n                                                                            style={{ backgroundColor: door.rowColour }}> <span style={{ color: \"white\" }}>{door.name}</span></button>\r\n                                                                    ))\r\n                                                                }\r\n                                                            </tr>\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            </div>\r\n                                            <h5 className=\"tracking-tab-title mb-0 text-bold-600\">Line/Area Command</h5>\r\n                                            <div className=\"bottom-content\" style={{ maxHeight: \"450px\", paddingBottom: \"10px\" }}>\r\n                                                <table>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.Commands.map(cmd => (\r\n                                                                <tr>\r\n                                                                    <td value={cmd.id} onClick={this.onClickLineAreaCommand} className=\"tracking-list list-group text-center\">\r\n                                                                        <span style={{ backgroundColor: cmd.rowColour }} className=\" list-group-item border py-1 px-0 d-flex justify-content-between align-items-center\" >\r\n                                                                            <button className=\"btn tracking-task text-bold-600\" value={cmd.id} onClick={this.onClickLineAreaCommand}\r\n                                                                                style={{ backgroundColor: cmd.rowColour, minWidth: \"290px\", textAlign: \"center\" }}>\r\n                                                                                {cmd.uiname}\r\n                                                                            </button>\r\n                                                                        </span>\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Modal show={this.state.isCommandOpen} onHide={this.openAckIndModal}>\r\n                        <Modal.Header closeButton className=\"modal-header bg-danger white\">\r\n                            <Modal.Title >\r\n                                <h4 className=\"modal-title text-center\" id=\"myModalLabel10\">Please confirm to {this.state.CommandEvent} </h4>\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <form onSubmit={e => e.preventDefault()}>\r\n                            <Modal.Body className=\"modal-body\">\r\n                                <div >\r\n                                    <h4>Please enter remarks </h4>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" value={this.state.Remarks}\r\n                                            onChange={e => this.setState({ Remarks: e.target.value })}\r\n                                            placeholder=\"Remarks\" minLength=\"6\" className=\"form-control\" required></input>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"alert alert-success\" role=\"alert\" style={{ display: this.state.CommendAlerts }}>\r\n                                    <span className=\"text-bold-600\">Done!</span> {this.state.CommandMessage}\r\n                                </div>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeAckIndModal}> Close </Button>\r\n                                <Button type=\"Submit\" onClick={() => this.handleSaveCommand()} variant=\"secondary\"> Submit </Button>\r\n                            </Modal.Footer>\r\n                        </form>\r\n                    </Modal>\r\n\r\n                    <div className=\"col-xxl-3 col-xl-4 col-lg-4 col-md-6 col-12 region-stats-chart\">\r\n                        <div className=\"card statistic-card\">\r\n                            <div className=\"card-content\">\r\n                                {/* <div className=\"top-row statistics-card-title border-bottom-blue-grey border-bottom-lighten-5\">\r\n                                    <div className=\"py-1 pl-2 primary\">\r\n                                        <h4 className=\"mb-1\">Entry/Exit HMI Status</h4>\r\n                                    </div>\r\n                                </div> */}\r\n                                <ul className=\"nav nav-pills card-tabs pl-2 border-bottom-blue-grey border-bottom-lighten-5\" id=\"pills-tab\" role=\"tablist\">\r\n\r\n                                    <li className=\"nav-item\">\r\n                                        <a onClick={this.showToBioReader}> <h4 className=\"nav-link text-primary bg-transparent active px-0 mr-1 py-1\"\r\n                                            id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\"\r\n                                            role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">Bio Readers</h4></a>\r\n                                    </li>\r\n                                    <li className=\"nav-item\" >\r\n                                        <a onClick={this.showToHMIStatus}> <h4 className=\"nav-link text-primary bg-transparent active px-0 mr-1 py-1\"\r\n                                            id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\"\r\n                                            role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">HMI Status</h4></a>\r\n                                    </li>\r\n                                    <li className=\"nav-item\">\r\n                                        <a> <h4 className=\"nav-link text-danger bg-transparent active px-0 mr-1 py-1\"\r\n                                            id=\"pills-home-tab\"\r\n                                            role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\"> <i className=\"icon icon-settings\"></i></h4></a>\r\n                                    </li>\r\n                                </ul>\r\n                                <div className=\"tab-pane fade show \"\r\n                                    role=\"tabpanel\" style={{ display: this.state.ShowBioreader }} aria-labelledby=\"pills-home-tab\">\r\n                                    <div className=\"body-header pl-2\">\r\n                                        <div className=\"d-flex\">\r\n                                            <h5 class=\"mr-2 body-header-title text-bold-600 mb-0\">Bio Readers</h5>\r\n                                        </div>\r\n                                        <div class=\"body-header-subtitle\">\r\n                                            <div className=\"table-responsive\" style={{ maxHeight: \"350px\" }, { lineHeight: \"\" }}>\r\n                                                <table className=\"table\">\r\n                                                    <thead className=\"\">\r\n                                                        <tr>\r\n                                                            <th>Line Name</th>\r\n                                                            <th>Device Name</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.bioreader.map(reader => (\r\n                                                                <tr key={reader.lineId} style={{ backgroundColor: reader.rowColour }}>\r\n                                                                    <td>{reader.lineName}</td>\r\n                                                                    <td>{reader.deviceName}</td>\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ display: this.state.ShowHMIStstus }} className=\"tab-pane fade show \">\r\n                                    <div className=\"body-header pl-2\">\r\n                                        <div className=\"d-flex\">\r\n                                            <h5 class=\"mr-2 body-header-title text-bold-600 mb-0\">HMI Devices</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"body-header-subtitle\">\r\n                                        <div className=\"table-responsive\" style={{ maxHeight: \"350px\" }}>\r\n                                            <table className=\"table\">\r\n                                                <thead className=\"\">\r\n                                                    <tr>\r\n                                                        <th>Line Name</th>\r\n                                                        <th>HMI Name</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        this.state.HMIs.map(hmi => (\r\n                                                            hmi.hmiStatus == true ? (\r\n                                                                <tr key={hmi.id} style={{ backgroundColor: \"#40bf80\" }}>\r\n                                                                    <td>{hmi.lineName}</td>\r\n                                                                    <td>{hmi.hmiName} </td>\r\n                                                                </tr>\r\n                                                            ) : (\r\n                                                                    <tr key={hmi.id} style={{ backgroundColor: \"#ff8080\" }}>\r\n                                                                        <td>{hmi.lineName}</td>\r\n                                                                        <td>{hmi.hmiName} </td>\r\n                                                                    </tr>\r\n                                                                )\r\n                                                        ))}\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nclass MaxCountComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveMaxCountDetails = this.retriveMaxCountDetails.bind(this);\r\n        this.state = {\r\n            MaxCount: \"\",\r\n            CurrentCount: \"\",\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //this.timer = setInterval(() => {\r\n        this.retriveMaxCountDetails();\r\n        //}, 1000);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"d-flex align-items-start mb-sm-1 mb-xl-0 border-right-blue-grey border-right-lighten-5\">\r\n                    <span className=\"card-icon danger d-flex justify-content-center\">\r\n                        <i className=\"icon p-1 icon-pie-chart customize-icon font-large-2 p-1\"></i>\r\n                    </span>\r\n                    <div className=\"stats-amount col-md-10\">\r\n                        <h4 className=\"heading-text text-bold-600\">Current Count: {this.state.CurrentCount}</h4>\r\n                        <h5 className=\"sub-heading\">Max Count:  {this.state.MaxCount}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass CurrentInUsers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retrieveCurrentInUsers = this.retrieveCurrentInUsers.bind(this);\r\n\r\n        this.state = {\r\n            users: []\r\n\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.timer = setInterval(() => {\r\n            this.retrieveCurrentInUsers();\r\n        }, 6000)\r\n    }\r\n    updateUsersByLineId(id) {\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    retrieveCurrentInUsers() {\r\n        SACSDataServices.GetAllCurrentInUsers().then(response => {\r\n            // alert(JSON.stringify(response.data));\r\n            this.setState({\r\n                users: response.data\r\n            });\r\n            console.log(response.data);\r\n        })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-xxl-6 col-xl-8 col-lg-8 col-md-12 col-12 power-consumption-stats-chart\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content pt-2 px-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8 d-flex\">\r\n                                <div className=\"ml-1\">\r\n                                    <h4 className=\"power-consumption-stats-title text-bold-500\">\r\n                                        Currently In Users in Selected Area/Line</h4>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"col-4 d-flex justify-content-end pr-3\">\r\n                                <div className=\"dark-text\">\r\n                                    <h4 className=\"power-consumption-active-tab text-bold-500\">Sterile Corridor</h4>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div id=\"spline-chart\">\r\n                            <div className=\"table-responsive\" style={{ maxHeight: \"330px\" }}>\r\n                                <table className=\"table\">\r\n                                    <thead className=\"\">\r\n                                        <tr>\r\n                                            <th>EID</th>\r\n                                            <th>Sub Line Name</th>\r\n                                            <th>User Name</th>\r\n                                            <th>Entry Time</th>\r\n                                            <th>Door Status</th>\r\n                                            <th>Duration</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            this.state.users.map(usr => (\r\n                                                <tr key={usr.userEID} style={{ backgroundColor: usr.rowColour }}>\r\n                                                    <td>{usr.userEID}</td>\r\n                                                    <td>{usr.subLineName}</td>\r\n                                                    <td>{usr.userName}</td>\r\n                                                    <td>{moment(usr.inTime).format(\"HH:mm:ss\")}</td>\r\n                                                    <td>{usr.doorStatus}</td>\r\n                                                    <td>{\r\n                                                        usr.duration\r\n                                                    }\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nclass Bioreader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retrieveBioreaders = this.retrieveBioreaders.bind(this);\r\n        this.state = {\r\n            bioreader: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.retrieveBioreaders();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.timer = setInterval(() => {\r\n            clearInterval(this.timer);\r\n        }, 6000);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    retrieveBioreaders() {\r\n        SACSDataServices.GetBioReaders()\r\n            .then(response => {\r\n                this.setState({\r\n                    bioreader: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xxl-3 col-xl-4 col-lg-4 col-md-6 col-12 tracking-stats-chart\" >\r\n                <div className=\"card chart-with-tabs\">\r\n                    <div className=\"card-content\">\r\n                        <ul className=\"nav nav-pills card-tabs pl-2 border-bottom-blue-grey border-bottom-lighten-5\" id=\"pills-tab\" role=\"tablist\">\r\n                            {/* <li className=\"nav-item\">\r\n                                <h5 className=\"nav-link text-primary bg-transparent active px-0 mr-1 py-1\"\r\n                                    id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\" role=\"tab\"\r\n                                    aria-controls=\"pills-home\" aria-selected=\"true\">Bio Readers Status</h5>\r\n                            </li> */}\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link text-primary bg-transparent active px-0 mr-1 py-1\"\r\n                                    id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\"\r\n                                    role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">Bio Readers</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link text-primary bg-transparent px-0 py-1\"\r\n                                    id=\"pills-profile-tab\" data-toggle=\"pill\" href=\"#pills-profile\" role=\"tab\"\r\n                                    aria-controls=\"pills-profile\" aria-selected=\"false\">Doors</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link text-primary bg-transparent px-0 mr-1 py-1\" id=\"pills-profile-tab\"\r\n                                    data-toggle=\"pill\" href=\"#pills-profile\" role=\"tab\" aria-controls=\"pills-profile\"\r\n                                    aria-selected=\"false\">Doors</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"tab-content\" id=\"pills-tabContent\">\r\n                            <div className=\"tab-pane fade show active\" id=\"pills-home\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\r\n                                <div className=\"body-header pl-2\">\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"table-responsive\" style={{ maxHeight: \"330px\" }}>\r\n                                            <table className=\"table\">\r\n                                                <thead className=\"\">\r\n                                                    <tr>\r\n                                                        <th>Line Name</th>\r\n                                                        <th>Device Name</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        this.state.bioreader.map(reader => (\r\n                                                            <tr key={reader.lineId} style={{ backgroundColor: reader.rowColour }}>\r\n                                                                <td>{reader.lineName}</td>\r\n                                                                <td>{reader.deviceName}</td>\r\n                                                            </tr>\r\n                                                        ))}\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nclass HMIStatus extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveGetAllHMIStatus = this.retriveGetAllHMIStatus.bind(this);\r\n        this.state = {\r\n            HMIs: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        // this.timer = setInterval(() => {\r\n        this.retriveGetAllHMIStatus();\r\n        // }, 100000);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    retriveGetAllHMIStatus() {\r\n        SACSDataServices.GetAllHMIStatus().then(response => {\r\n            this.setState({\r\n                HMIs: response.data\r\n            });\r\n            console.log(response.data);\r\n        })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xxl-3 col-xl-4 col-lg-4 col-md-6 col-12 region-stats-chart\">\r\n                <div className=\"card statistic-card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"top-row statistics-card-title border-bottom-blue-grey border-bottom-lighten-5\">\r\n                            <div className=\"py-1 pl-2 primary\">\r\n                                <h4 className=\"mb-1\">Entry/Exit HMI Status</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"statistics-chart d-flex justify-content-center align-self-center\">\r\n                            <div id=\"sales_in_region_pie_donut\"></div>\r\n                        </div>\r\n                        <div className=\"statistics-chart-data d-flex justify-content-center ml-auto mr-auto pb-50 mb-2\">\r\n                            <div className=\"table-responsive\" style={{ maxHeight: \"315px\" }}>\r\n                                <table className=\"table\">\r\n                                    <thead className=\"\">\r\n                                        <tr>\r\n                                            <th>Line Name</th>\r\n                                            <th>HMI Name</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            this.state.HMIs.map(hmi => (\r\n                                                hmi.hmiStatus == true ? (\r\n                                                    <tr key={hmi.id} style={{ backgroundColor: \"#40bf80\" }}>\r\n                                                        <td>{hmi.lineName}</td>\r\n                                                        <td>{hmi.hmiName} </td>\r\n                                                    </tr>\r\n                                                ) : (\r\n                                                        <tr key={hmi.id} style={{ backgroundColor: \"#ff8080\" }}>\r\n                                                            <td>{hmi.lineName}</td>\r\n                                                            <td>{hmi.hmiName} </td>\r\n                                                        </tr>\r\n                                                    )\r\n                                            ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nclass ServeerStatus extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveSACSServerStatus = this.retriveSACSServerStatus.bind(this);\r\n        this.state = {\r\n            Serverdata: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //this.timer = setInterval(() => {\r\n        this.retriveSACSServerStatus();\r\n        //}, 1000);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    retriveSACSServerStatus() {\r\n        SACSDataServices.GetAllSACSServerStatus().then(response => {\r\n            this.setState({\r\n                Serverdata: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"col-xxl-4 col-xl-8 col-lg-8 col-md-12 col-12 latest-update-tracking\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-header latest-update-heading d-flex justify-content-between\">\r\n                        <h4 class=\"latest-update-heading-title text-bold-500\">Servers Status</h4>\r\n\r\n                    </div>\r\n                    <div class=\"card-content latest-update-tracking-list pt-0 pb-1 px-2 position-relative\">\r\n                        <div className=\"table-responsive\" style={{ maxHeight: '250px' }}>\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Server Name</th>\r\n                                        <th>Updated Time</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.state.Serverdata.map(ser => (\r\n\r\n                                            <tr key={ser.id} style={{ backgroundColor: ser.rowColour }}>\r\n                                                <td>{ser.serverNameInUi}</td>\r\n                                                <td>{moment(ser.serverUpdatedTime).format(\"HH:mm:ss\")}</td>\r\n                                            </tr>\r\n\r\n                                        ))}\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nclass PLCStatus extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveGetAllPLCStatus = this.retriveGetAllPLCStatus.bind(this)\r\n        this.state = {\r\n            PLCSData: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.timer = setInterval(() => {\r\n            this.retriveGetAllPLCStatus();\r\n        }, 6000);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    retriveGetAllPLCStatus() {\r\n        SACSDataServices.GetAllPLCStatus().then(response => {\r\n            this.setState({\r\n                PLCSData: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div class=\"col-xxl-8 col-xl-12 col-lg-12 col-md-12 col-12\">\r\n                <div class=\"card info-time-tracking\">\r\n                    <div class=\"card-content\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 pt-2 pb-1 border-bottom-blue-grey border-bottom-lighten-5\">\r\n                                <div class=\"info-time-tracking-title d-flex justify-content-between align-items-center\">\r\n                                    <h5 class=\"pl-2 mb-0 title-info-time-heading text-bold-500\">PLC(DIS) Status</h5>\r\n                                    <span class=\"pr-2\">\r\n                                        <i class=\"icon icon-settings\"></i>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12\">\r\n                                <div class=\"info-time-tracking-content\">\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-12 col-sm-12  \">\r\n                                            <table className=\"table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Line Name</th>\r\n                                                        <th>PLC(DIS) Name</th>\r\n                                                        <th>Line Name</th>\r\n                                                        <th>PLC(DIS) Name</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        this.state.PLCSData.map(plc => (\r\n                                                            <tr key={plc.lineID} style={{ backgroundColor: plc.rowColour }}>\r\n                                                                <td>{plc.lineName}</td>\r\n                                                                <td>{plc.plcName}</td>\r\n                                                            </tr>\r\n                                                        ))}\r\n\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default class Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                    </div>\r\n                    <div className=\"content-body\" style={{ lineHeight: \"1\" }, { fontSize: \"0.9rem\" }}>\r\n                        <React.Fragment>\r\n                            <PageHeader></PageHeader>\r\n                            <div className=\"row minimal-modern-charts\">\r\n                                {/* <CurrentInUsers></CurrentInUsers> */}\r\n                                {/* <Bioreader></Bioreader>\r\n                                <HMIStatus></HMIStatus> */}\r\n                                <ServeerStatus></ServeerStatus>\r\n                                <PLCStatus></PLCStatus>\r\n                            </div>\r\n                        </React.Fragment>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n<Page></Page>","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\test.component.js",["146","147"],"\r\nimport React, { Component } from \"react\";\r\nimport SACSDataServices from \"../Services/sacs.services\";\r\nimport clientlogo from '../app-assets/images/icons/cmp-logo.png';\r\nimport 'svg2pdf.js'\r\n\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nclass OrderComponent extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.retriveAlarmHistoryDate = this.retriveAlarmHistoryDate.bind(this);\r\n\r\n    this.state = {\r\n      data: [],\r\n      lineNumber: 1,\r\n      new_Page: true,\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    // this.retriveAllLinesDate();\r\n    this.retriveAlarmHistoryDate();\r\n    // const [value, onChange] = useState(new Date());\r\n  }\r\n  retriveAlarmHistoryDate() {\r\n    SACSDataServices.GetAllAlarmSummary().then(response => {\r\n\r\n      this.setState({\r\n        data: response.data\r\n      });\r\n      console.log(response.data);\r\n    }).catch(e => {\r\n      console.log(e);\r\n    });\r\n  }\r\n  generatePDF = () => {\r\n    var doc = new jsPDF('p', 'mm', 'A3');\r\n    doc.page=1\r\n    var totalPagesExp = doc.internal.getNumberOfPages()\r\n\r\n    //doc.printHeaderRow( this.state.lineNumber, this.state.new_Page)\r\n    // doc.text(20, 20, 'This is the first title.')\r\n\r\n    //doc.setFont('helvetica')\r\n    //doc.setFontType('normal')\r\n    // doc.text(20, 60, 'This is the second title.')\r\n    function headRows() {\r\n      return [\r\n        { id: 'ID', name: 'Name', email: 'Email', city: 'City', expenses: 'Sum' },\r\n      ]\r\n    }\r\n\r\n    function footRows() {\r\n      return [\r\n        { id: 'ID', name: 'Name', email: 'Email', city: 'City', expenses: 'Sum' },\r\n      ]\r\n    }\r\n    function bodyRows(rowCount) {\r\n      // rowCount = rowCount || 10\r\n      // var body = []\r\n      // for (var j = 1; j <= rowCount; j++) {\r\n      //   body.push({\r\n      //     id: j,\r\n      //     name: faker.name.findName(),\r\n      //     email: faker.internet.email(),\r\n      //     city: faker.address.city(),\r\n      //     expenses: faker.finance.amount(),\r\n      //   })\r\n      // }\r\n      // return body\r\n    }\r\n\r\n    doc.autoTable({\r\n      html: '#my-table',\r\n      theme: 'grid',\r\n      tableWidth: 250,\r\n      columnStyles: {\r\n        3: { cellWidth: 'wrap' }\r\n      },\r\n\r\n      head: headRows(),\r\n      body: bodyRows(40),\r\n      didDrawPage: function (data) {\r\n        // Header\r\n        doc.setFontSize(20)\r\n        doc.setTextColor(40)\r\n\r\n        // doc.addImage(\"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\app-assets\\images\\avatar.jpg\", 'JPEG', data.settings.margin.left, 15, 10, 10)\r\n        doc.autoTable({\r\n          html: '#tblHeader',\r\n          theme: 'grid',\r\n          tableWidth: 250,\r\n          columnStyles: {\r\n            3: { cellWidth: 'wrap' }\r\n          },\r\n        });\r\n        // doc.text('Report', data.settings.margin.left + 15, 22)\r\n\r\n        // Footer\r\n        var str = 'Page ' + doc.internal.getNumberOfPages()\r\n        // Total page number plugin only available in jspdf v1.0+\r\n        if (typeof doc.putTotalPages === 'function') {\r\n          str = str + ' of ' + totalPagesExp\r\n        }\r\n        doc.setFontSize(10)\r\n\r\n        // jsPDF 1.4+ uses getWidth, <1.4 uses .width\r\n        var pageSize = doc.internal.pageSize\r\n        var pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight()\r\n        doc.text(str, data.settings.margin.left, pageHeight - 10)\r\n        doc.page++\r\n      },\r\n      margin: { top: 30 },\r\n\r\n\r\n    });\r\n\r\n    //doc.setFont('helvetica')\r\n    //doc.setFontType('normal')\r\n    // doc.text(20, 100, 'This is the thrid title.')      \r\n     // use this as a counter.\r\n\r\n\r\n\r\n    doc.save('demo.pdf')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.generatePDF} type=\"primary\">Download PDF</button>\r\n        {/* <table id=\"tblHeader\" style={{paddingBottom:\"20px\"}}>\r\n           <thead>\r\n            <tr>\r\n              <th>1</th>\r\n              <th>2</th>\r\n              <th>3</th>\r\n\r\n            </tr>\r\n          </thead> \r\n          <tbody>\r\n            <tr>\r\n              <td rowSpan=\"0\">SunPharma Halol\r\n              </td>\r\n\r\n            </tr>\r\n            <tr>\r\n              <td>Smart Access Control System</td>\r\n              <td>Alarm History Report</td>\r\n            </tr>\r\n              \r\n            <tr></tr>\r\n          </tbody>\r\n        </table> */}\r\n        <table id=\"tblHeader\" className=\"table display nowrap table-striped table-bordered scroll-horizontal\">         \r\n          <tr>\r\n          <td rowspan=\"2\" ><img src={clientlogo}></img> <br></br>\r\n          <h1>Sunpharma Halol</h1>\r\n          </td>          \r\n            <td><h3>Smart Access Control Solution</h3></td>\r\n          </tr>\r\n          <tr>\r\n            <td><h3> Audit Trail Report</h3></td>            \r\n          </tr>\r\n        </table>\r\n        <div className=\"card-content collapse show\">\r\n          <div className=\"card-body card-dashboard\">\r\n            <table id=\"my-table\" className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Line Name</th>\r\n                  <th>Alarm DateTime</th>\r\n                  <th>Alarm Tag</th>\r\n                  <th>Alarm Description</th>\r\n                  <th>Alarm Ack. User</th>\r\n                  <th>Alarm Ack. Datetime</th>\r\n                  <th>Rearks</th>\r\n                  <th>RTN DateTime</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  this.state.data.map(alarm => (\r\n                    <tr key={alarm.id}>\r\n                      <td>{alarm.lineName}</td>\r\n                      <td>{alarm.alarmDateTime}</td>\r\n                      <td>{alarm.alarmTag}</td>\r\n                      <td>{alarm.alarmDesc}</td>\r\n                      <td>{alarm.alarmAckUser}</td>\r\n                      <td>{alarm.alarmAckDateTime}</td>\r\n                      <td>{alarm.remarks}</td>\r\n                      <td>{alarm.alarmRtnDateTime}</td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n//   state = {\r\n//     numPages: null,\r\n//     pageNumber: 1,\r\n//   }\r\n\r\n//   onDocumentLoadSuccess = ({ numPages }) => {\r\n//     this.setState({ numPages });\r\n//   }\r\n\r\n//   render() {\r\n//     const { pageNumber, numPages } = this.state;\r\n\r\n//     return (\r\n//       <div>\r\n//         <Document\r\n//           file=\"somefile.pdf\"\r\n//           onLoadSuccess={this.onDocumentLoadSuccess}\r\n//         >\r\n//           <Page pageNumber={pageNumber} />\r\n//         </Document>\r\n//         <p>Page {pageNumber} of {numPages}</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// // Create styles\r\n// const styles = StyleSheet.create({\r\n//   page: {\r\n//     flexDirection: 'row',\r\n//     backgroundColor: '#E4E4E4'\r\n//   },\r\n//   section: {\r\n//     margin: 10,\r\n//     padding: 10,\r\n//     flexGrow: 1\r\n//   }\r\n// });\r\n\r\n// // Create Document Component\r\n// const MyDocument = () => (\r\n//   <Document>\r\n//     <Page size=\"A4\" style={styles.page}>\r\n//       <View style={styles.section}>\r\n//         <Text>Section #1</Text>\r\n//       </View>\r\n//       <View style={styles.section}>\r\n//         <Text>Section #2</Text>\r\n//       </View>\r\n//     </Page>\r\n//   </Document>\r\n// );\r\n// const OrderComponent = () => (\r\n//   <PDFViewer>\r\n//     <MyDocument />\r\n//   </PDFViewer>\r\n// );\r\n//ReactPDF.render(<MyDocument />, `${\"../Downloads\"}/example.pdf`);\r\n\r\n// function OrderComponent() {\r\n//   const [count, setCount] = useState(0);\r\n\r\n\r\n\r\n//   console.log(count)\r\n//   return (\r\n//     <div>\r\n//       <p>You clicked {count} times</p>\r\n//       <button onClick={() => setCount(count + 1)}>\r\n//         Click me\r\n//       </button>\r\n\r\n\r\n//     </div>\r\n//   );\r\n\r\n// }\r\n\r\nexport default OrderComponent;","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\alarm-history.component.js",["148","149","150","151"],"import React from 'react';\r\nimport SACSDataServices from '../Services/sacs.services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport DatePicker from 'react-datepicker';\r\nimport { faSync, } from '@fortawesome/free-solid-svg-icons';\r\nimport { jsPDF, printHeaderRow } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport moment from \"moment\";\r\nexport default class AlarmHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveAllLinesDate = this.retriveAllLinesDate.bind(this);\r\n        this.retriveAlarmHistoryDate = this.retriveAlarmHistoryDate.bind(this);\r\n\r\n        this.state = {\r\n            Lines: [],\r\n            data: [],\r\n            Fromdate: new Date(),\r\n            todate: new Date(),\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.retriveAllLinesDate();\r\n        this.retriveAlarmHistoryDate();\r\n        // const [value, onChange] = useState(new Date());\r\n    }\r\n    retriveAllLinesDate() {\r\n        SACSDataServices.GetALlLines().then(response => {\r\n            this.setState({\r\n                Lines: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onChange = (e) => {\r\n        SACSDataServices.GetAllAlarmSummaryByLineID(e.target.value).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onClick = () => {\r\n        SACSDataServices.GetAllAlarmSummary().then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    changeFromDate = (e) => {\r\n\r\n        this.setState({\r\n            Fromdate: e\r\n        });\r\n    }\r\n    changeToDate = (e) => {\r\n\r\n        this.setState({\r\n            todate: e\r\n        });\r\n    }\r\n    retriveAlarmHistoryDate() {\r\n        SACSDataServices.GetAllAlarmSummary().then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    generatePDF = () => {\r\n        var doc = new jsPDF('p', 'mm', 'A3');\r\n        doc.page = 1\r\n        var totalPagesExp = doc.internal.getNumberOfPages()        \r\n        \r\n        doc.autoTable({\r\n            html: '#my-table',\r\n            theme: 'grid',\r\n            tableWidth: 250,\r\n            setFontSize:25,\r\n            columnStyles: {\r\n                3: { cellWidth: 'wrap' }\r\n            },\r\n\r\n            //head: headRows(),\r\n            //body: bodyRows(40),\r\n            didDrawPage: function (data) {\r\n                // Header\r\n                doc.setFontSize(20)\r\n                doc.setTextColor(40)\r\n                \r\n                doc.autoTable({\r\n                    html: '#tblHeader',\r\n                    theme: 'grid',\r\n                    tableWidth: 250,\r\n                    columnStyles: {\r\n                        3: { cellWidth: 'wrap' }\r\n                    },\r\n                });\r\n               \r\n                // Footer\r\n                var str = 'Page ' + doc.internal.getNumberOfPages()\r\n                // Total page number plugin only available in jspdf v1.0+\r\n                if (typeof doc.putTotalPages === 'function') {\r\n                    str = str + ' of ' + totalPagesExp\r\n                }\r\n                doc.setFontSize(10)\r\n\r\n                // jsPDF 1.4+ uses getWidth, <1.4 uses .width\r\n                var pageSize = doc.internal.pageSize\r\n                var pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight()\r\n                doc.text(str, data.settings.margin.left, pageHeight - 10)\r\n                doc.page++\r\n            },\r\n            margin: { top: 30 },\r\n        });\r\n        doc.save('AlarmSummaryReport' + moment(new Date()).format(\"DDMMYYHHmmss\") + '.pdf')\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Alarm History</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content-body\">\r\n                        <section id=\"horizontal\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-header\">\r\n                                            <section className=\"basic-elements\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12\">\r\n                                                        <div className=\"card-content\">\r\n                                                            <div className=\"card-body\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-xl-2 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"basicInput\">Select Line</h4>\r\n                                                                            <select id=\"ddlLines\" onChange={this.onChange} className=\" form-control\" name=\"ddlLines\"\r\n                                                                                defaultValue={this.state.selectValue}\r\n                                                                                onChange={this.onChange}\r\n                                                                                className=\"form-control col-md-12\">\r\n                                                                                {\r\n                                                                                    this.state.Lines.map(lines => (\r\n                                                                                        <option className=\"\" value={lines.id}>\r\n                                                                                            {lines.lineName}\r\n                                                                                        </option>\r\n                                                                                    ))}\r\n                                                                            </select>\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n\r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"helpInputTop\">From Date</h4>\r\n\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.Fromdate}\r\n\r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeFromDate} />\r\n                                                                            {/* <input type=\"text\"  value={moment(this.state.Fromdate).subtract(1, 'days').format(\"DD-MM-YYYY\")}\r\n                                                                                className=\"form-control\" id=\"helpInputTop\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"disabledInput\">To Date</h4>\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.todate}\r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeToDate} />\r\n                                                                            {/* <input type=\"datetime\" value={moment(this.state.todate).format(\"DD-MM-YYYY\")} className=\"form-control\" id=\"disabledInput\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </section>\r\n\r\n\r\n                                            <div className=\"heading-elements\">\r\n                                                <ul className=\"list-inline mb-0\">\r\n                                                    {/* <li><a data-action=\"collapse\" ><FontAwesomeIcon icon={faMinus}></FontAwesomeIcon> </a></li> */}\r\n                                                    <li><a data-action=\"reload\" onClick={this.onClick}> <FontAwesomeIcon icon={faSync}></FontAwesomeIcon></a></li>\r\n                                                    <button className=\"btn btn-primary\" onClick={this.generatePDF} type=\"primary\">Download PDF</button>\r\n                                                    {/* <li><a data-action=\"expand\"><FontAwesomeIcon icon={faWindowMaximize}></FontAwesomeIcon></a></li> */}\r\n                                                    {/* <li><a data-action=\"close\"><FontAwesomeIcon icon={faTimes}></FontAwesomeIcon> </a></li> */}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-content collapse show\">\r\n                                            <table id=\"tblHeader\" style={{ display: 'none' }} className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                <tr>\r\n                                                    <td rowspan=\"2\" > <br></br>\r\n                                                        <h1>Sunpharma Halol</h1>\r\n                                                    </td>\r\n                                                    <td><h3>Smart Access Control Solution</h3></td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td><h3>Alarm Summary Report</h3></td>\r\n                                                </tr>\r\n                                            </table>\r\n                                            <div className=\"card-body card-dashboard\">\r\n                                                <table id=\"my-table\" className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Line Name</th>\r\n                                                            <th>Alarm DateTime</th>\r\n                                                            <th>Alarm Tag</th>\r\n                                                            <th>Alarm Description</th>\r\n                                                            <th>Alarm Ack. User</th>\r\n                                                            <th>Alarm Ack. Datetime</th>\r\n                                                            <th>Rearks</th>\r\n                                                            <th>RTN DateTime</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.data.map(alarm => (\r\n                                                                <tr key={alarm.id}>\r\n                                                                    <td>{alarm.lineName}</td>\r\n                                                                    <td>{alarm.alarmDateTime}</td>\r\n                                                                    <td>{alarm.alarmTag}</td>\r\n                                                                    <td>{alarm.alarmDesc}</td>\r\n                                                                    <td>{alarm.alarmAckUser}</td>\r\n                                                                    <td>{alarm.alarmAckDateTime}</td>\r\n                                                                    <td>{alarm.remarks}</td>\r\n                                                                    <td>{alarm.alarmRtnDateTime}</td>\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\site.config.component.js",["152","153","154","155","156","157"],"import React from 'react';\r\nimport SACSDataServices from '../Services/sacs.services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSync, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class SiteConfigCompoenet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveAllSiteConfigurations = this.retriveAllSiteConfigurations.bind(this);\r\n\r\n        this.state = {\r\n            PlantConfig: [],\r\n            Message: '',\r\n            CheckBox1: \"checked\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retriveAllSiteConfigurations();\r\n    }\r\n    onClick = () => {\r\n        SACSDataServices.GetAllSiteConfiguration().then(response => {\r\n            this.setState({\r\n                PlantConfig: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    handleInputChange(index, dataType, value) {\r\n        const newState = this.state.PlantConfig.map((item, i) => {\r\n            if (i === index) {\r\n                if (dataType === \"checkbox1\") {\r\n                    if (value == 1)\r\n                        value = 0;\r\n                    else if (value == 0)\r\n                        value = 1;\r\n                    // alert(value)\r\n                }\r\n                return { ...item, [dataType]: value };\r\n            }\r\n            return item;\r\n        });\r\n\r\n        this.setState({\r\n            PlantConfig: newState\r\n        });\r\n\r\n\r\n    }\r\n    retriveAllSiteConfigurations() {\r\n\r\n        SACSDataServices.GetAllSiteConfiguration().then(response => {\r\n            this.setState({\r\n                PlantConfig: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    handleSubmit = () => {\r\n\r\n        SACSDataServices.UpdatePlantConfiguration(this.state.PlantConfig,\"Admin123\").then(response => {\r\n            this.retriveAllSiteConfigurations();\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\" col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Site Configurations</h3>\r\n                        </div>\r\n                        <label className=\"\" >{this.Message}</label>\r\n                    </div>\r\n                    <div className=\"content-body\">\r\n                        <div className=\"row justify-content-md-center\">\r\n                            <div className=\"col-md-12\">\r\n                                <div className=\"card\">\r\n                                    <div className=\"card-header\">\r\n                                        <a className=\"heading-elements-toggle\"><i className=\"fa fa-ellipsis-v font-medium-3\"></i></a>\r\n                                        <div className=\"heading-elements\">\r\n                                            <ul className=\"list-inline mb-0\">\r\n                                                {/* <li><a data-action=\"collapse\" ><FontAwesomeIcon icon={faMinus}></FontAwesomeIcon> </a></li> */}\r\n                                                <li><a data-action=\"reload\" onClick={this.onClick}> <FontAwesomeIcon icon={faSync}></FontAwesomeIcon></a></li>\r\n                                                {/* <li><a data-action=\"expand\"><FontAwesomeIcon icon={faWindowMaximize}></FontAwesomeIcon></a></li>\r\n                                                <li><a data-action=\"close\"><FontAwesomeIcon icon={faTimes}></FontAwesomeIcon> </a></li> */}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                    <form onSubmit={e => e.preventDefault()}>\r\n                                        <div className=\"card-content collpase show\">\r\n                                            <div className=\"card-body table-responsive\" style={{ maxHeight: \"650px\" }}>\r\n                                                <table className=\"table display nowrap table-striped \">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th><h4> Parameter Description</h4></th>\r\n                                                            <th><h4> Value </h4></th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.PlantConfig.map((row, index) => (\r\n                                                                <tr key={this.state.PlantConfig[index].id} className=\"form form-horizontal\">\r\n                                                                    <td style={{ border: \"1px solid black\" }, { width: \"500px\" }}>\r\n                                                                        <label className=\"col-md-12 label-control\" for=\"eventRegInput1\">\r\n                                                                            {this.state.PlantConfig[index].description}</label>\r\n                                                                    </td>\r\n                                                                    <td>{\r\n                                                                        <div className=\"form-body\">\r\n                                                                            <div className=\"form-group row\">\r\n                                                                                <div className=\"col-md-8\">\r\n                                                                                    {\r\n                                                                                        this.state.PlantConfig[index].type === 1 || this.state.PlantConfig[index].type === 4 ?\r\n                                                                                            <input type={this.state.PlantConfig[index].type == 1 ? \"text\" : \"number\"}\r\n                                                                                                value={this.state.PlantConfig[index].value}\r\n                                                                                                onChange={e => this.handleInputChange(index, 'value', e.target.value)} id=\"eventRegInput1\"\r\n                                                                                                className=\"form-control\" placeholder=\"name\" required></input>\r\n                                                                                            : \"\"\r\n                                                                                    }\r\n                                                                                    {\r\n                                                                                        this.state.PlantConfig[index].type === 3 ?\r\n                                                                                            <input type=\"text\"\r\n                                                                                                value={this.state.PlantConfig[index].value}\r\n                                                                                                onChange={e => this.handleInputChange(index, 'value', e.target.value)} id=\"eventRegInput1\"\r\n                                                                                                className=\"form-control\" placeholder=\"name\" required></input>\r\n                                                                                            : \"\"\r\n                                                                                    }\r\n                                                                                    {\r\n                                                                                        this.state.PlantConfig[index].type === 2 ?\r\n                                                                                            <input type=\"number\" min=\"0\" max=\"1\"  value={this.state.PlantConfig[index].value} className=\"form-control\"\r\n                                                                                            onChange={e => this.handleInputChange(index, 'value', e.target.value)} required ></input>\r\n                                                                                            : \"\"\r\n\r\n                                                                                        // this.state.PlantConfig[index].value == 1 ?\r\n                                                                                        //     <input type=\"checkbox\" value=\"1\" onChange={e => this.handleInputChange(index, 'checkbox1', e.target.value)} id=\"eventRegInput1\"\r\n                                                                                        //         defaultChecked={this.state.CheckBox1}></input>\r\n                                                                                        //     : <input type=\"checkbox\" value=\"0\" onChange={e => this.handleInputChange(index, 'checkbox', e.target.value)} id=\"eventRegInput1\"\r\n                                                                                        //     ></input>\r\n                                                                                        // : \"\"\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    }\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                                <div className=\"form-actions center text-center\">\r\n                                                    <button type=\"button\" className=\"btn btn-warning mr-1\">\r\n                                                        <FontAwesomeIcon icon={faTimes}></FontAwesomeIcon>  Cancel\r\n                                                </button>\r\n                                                    <button className=\"btn btn-primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                                                        <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>  Save\r\n                                                </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\biousers.admin.component.js",["158","159","160"],"import React from \"react\";\r\nimport SACSDataServices from '../Services/sacs.services';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport DatePicker from 'react-datepicker';\r\nimport { useState } from 'react'\r\nexport default class BioUsersComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //this.retrivebioUsers = this.retrivebioUsers.bind(this);\r\n        this.retriveAllDepartments = this.retriveAllDepartments.bind(this);\r\n        this.state = {\r\n            BioUsers: [],\r\n            Depts: [],\r\n            Trainings: [],\r\n            LineAssociate: [],\r\n            show: true,\r\n            UserId: \"\",\r\n            Alerts: \"none\",\r\n            isTrainngOpen: false,\r\n            islineAssociateOpen:false,\r\n            isPINChangeOpen:false,\r\n            Message: \"\",\r\n            ShowMessage: \"none\",\r\n            ExpiryDate: new Date(),\r\n            LAssociatechecked:\"checked\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.retrivebioUsers();\r\n        this.retriveAllDepartments();\r\n    }\r\n    retrivebioUsers() {\r\n        SACSDataServices.GetAllBioUsres().then(response => {\r\n            this.setState({\r\n                BioUsers: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveAllDepartments() {\r\n        SACSDataServices.GetAllDepartments().then(response => {\r\n            this.setState({\r\n                Depts: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveTrainigExpDetailsByUserId() {\r\n        //alert(this.state.UserId)\r\n        SACSDataServices.GetTrainigExpDetailsByUserId(this.state.UserId).then(response => {\r\n            this.setState({\r\n                Trainings: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onClickRow = (e) => {\r\n\r\n        //e.preventDefault();    \r\n        this.setState({\r\n            UserId: e\r\n        });\r\n        return false;\r\n        // SACSDataServices.GetTrainigExpDetailsByUserId(e).then(response => {\r\n        //     this.setState({\r\n        //         Trainings: response.data\r\n        //     });\r\n        // }).catch(e => {\r\n        //     console.log(e);\r\n        // });\r\n    }\r\n    changeExpiryDate = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            ExpiryDate: e\r\n        });\r\n    }\r\n    changeDepartment = (e) => {\r\n        e.preventDefault();\r\n        SACSDataServices.UpdateUserDepartmentByUserId(this.state.UserId, e.target.value).then(response => {\r\n            if (response.data === true) {\r\n                this.setState({\r\n                    Message: \"Department Updated Successfully!\",\r\n                    ShowMessage: \"\",\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    Message: \"Department Updated Failed!\",\r\n                    ShowMessage: \"\"\r\n                });\r\n            }\r\n            this.retrivebioUsers();\r\n        })\r\n    }\r\n    ChangeUsersEnable = (e) => {\r\n        //e.preventDefault();\r\n\r\n        SACSDataServices.UpdateUserEnableDisabelByUserId(e.target.value).then(response => {\r\n            if (response.data === true) {\r\n                this.setState({\r\n                    Message: \"User Status Updated Successfully!\",\r\n                    ShowMessage: \"\",\r\n                });\r\n\r\n            }\r\n            else {\r\n                this.setState({\r\n                    Message: \"User Status Updated Failed!\",\r\n                    ShowMessage: \"\"\r\n                });\r\n            }\r\n            this.retrivebioUsers();\r\n        })\r\n    }\r\n    ChangeUsersActive = (e) => {\r\n        //e.preventDefault();\r\n        SACSDataServices.UpdateUserActiveorInactiveByUserId(e.target.value).then(response => {\r\n            this.retrivebioUsers();\r\n            if (response.data === true) {\r\n                this.setState({\r\n                    Message: \"User Status Updated Successfully!\",\r\n                    ShowMessage: \"\",\r\n                });\r\n\r\n            }\r\n            else {\r\n                this.setState({\r\n                    Message: \"User Status Updated Failed!\",\r\n                    ShowMessage: \"\"\r\n                });\r\n            }\r\n\r\n        })\r\n    }\r\n    ChangeSupervisor = (e) => {\r\n\r\n        SACSDataServices.UpdateIsSupervisors(e.target.value).then(response => {\r\n            if (response.data === true) {\r\n\r\n                this.setState({\r\n                    Message: \"User Detail Updated Successfully!\",\r\n                    ShowMessage: \"\",\r\n                });\r\n                //this.retrivebioUsers();\r\n            }\r\n            else {\r\n                this.setState({\r\n                    Message: \"User Detail Updated Failed!\",\r\n                    ShowMessage: \"\"\r\n                });\r\n            }\r\n            this.retrivebioUsers();\r\n        })\r\n        //e.preventDefault();\r\n    }\r\n    openTrainingModal = (e) => {\r\n        //alert(e.target.value)\r\n        SACSDataServices.GetTrainigExpDetailsByUserId(e.target.value).then(response => {\r\n            this.setState({\r\n                Trainings: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        // this.retriveTrainigExpDetailsByUserId();\r\n        this.setState({ isTrainngOpen: true, Alerts: \"none\" });\r\n    }\r\n    OpenLineAssociationModal = (e) => {\r\n        SACSDataServices.GetLineAssociationByUserId(e.target.value).then(response => {\r\n            this.setState({\r\n                LineAssociate: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n        this.setState({ islineAssociateOpen: true, Alerts: \"none\" });\r\n    }\r\n    ResetPINModal=(e)=>{\r\n       \r\n        this.setState({ isPINChangeOpen: true, Alerts: \"none\", UserId:e.target.value });\r\n    }\r\n    ReSetUserHMIPIN=()=>{\r\n       \r\n        SACSDataServices.ResetHMIPINByUserId(this.state.UserId).then(response => {\r\n            if(response.data==true)\r\n            {\r\n                this.setState({\r\n                    Message: \"User HMI PIN Updated Successfully!\",\r\n                    ShowMessage: \"\",\r\n                    Alerts:\"\"\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    AudioNameChange=(e)=>{\r\n        alert(\"hi\")\r\n        alert(this.state.UserId)       \r\n    }\r\n    LineAssociateChange=(e)=>{\r\n        //alert(e.target.value)\r\n    }\r\n\r\n    closeTrainingModal = () => this.setState({ isTrainngOpen: false, UserId: \"\" });\r\n    closeLineAssociateModal = () => this.setState({ islineAssociateOpen: false, UserId: \"\" });\r\n    closePINChangeModal = () => this.setState({ isPINChangeOpen: false, UserId: \"\" });\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <div className=\"app-content content\">\r\n                    <div className=\"content-overlay\"></div>\r\n                    <div className=\"content-wrapper\">\r\n                        <div className=\"content-header row\">\r\n                            <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                                <h3 className=\"content-header-title mb-0\">Bio Users Admin</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: this.state.ShowMessage }} class=\"alert alert-success alert-dismissible mb-2\" role=\"alert\">\r\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">×</span>\r\n                            </button>\r\n                            <strong></strong> {this.state.Message}\r\n                        </div>\r\n                        <div className=\"content-body\">\r\n                            <section className=\"users-list-wrapper\">\r\n                                <div className=\"users-list-filter px-1\">\r\n                                    <form>\r\n                                        {/* <div className=\"row border border-light rounded py-2 mb-2\">\r\n                                            <div className=\"col-12 col-sm-6 col-lg-3\">\r\n                                                <label for=\"users-list-verified\">Enabled</label>\r\n                                                <fieldset className=\"form-group\">\r\n                                                    <select className=\"form-control\" id=\"users-list-verified\">\r\n                                                        <option value=\"\">Any</option>\r\n                                                        <option value=\"Yes\">Yes</option>\r\n                                                        <option value=\"No\">No</option>\r\n                                                    </select>\r\n                                                </fieldset>\r\n                                            </div>\r\n                                            <div className=\"col-12 col-sm-6 col-lg-3\">\r\n                                                <label for=\"users-list-role\">Role</label>\r\n                                                <fieldset className=\"form-group\">\r\n                                                    <select className=\"form-control\" id=\"users-list-role\">\r\n                                                        <option value=\"\">Any</option>\r\n                                                        <option value=\"User\">User</option>\r\n                                                        <option value=\"Staff\">Staff</option>\r\n                                                    </select>\r\n                                                </fieldset>\r\n                                            </div>\r\n                                            <div className=\"col-12 col-sm-6 col-lg-3\">\r\n                                                <label for=\"users-list-status\">Status</label>\r\n                                                <fieldset className=\"form-group\">\r\n                                                    <select className=\"form-control\" id=\"users-list-status\">\r\n                                                        <option value=\"\">Any</option>\r\n                                                        <option value=\"Active\">Active</option>\r\n                                                        <option value=\"Close\">Close</option>\r\n                                                        <option value=\"Banned\">Banned</option>\r\n                                                    </select>\r\n                                                </fieldset>\r\n                                            </div>\r\n                                            <div className=\"col-12 col-sm-6 col-lg-3 d-flex align-items-center\">\r\n                                                <button className=\"btn btn-block btn-primary glow\">Show</button>\r\n                                            </div>\r\n                                        </div> */}\r\n                                    </form>\r\n                                </div>\r\n                                <div className=\"users-list-table\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-content\">\r\n                                            <div className=\"card-body\">\r\n\r\n                                                <div className=\"table-responsive\">\r\n                                                    <table id=\"users-list-datatable\" className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th>User EID</th>\r\n                                                                <th>Username</th>\r\n                                                                <th>Department</th>\r\n                                                                <th>Enabled</th>\r\n                                                                <th>Active</th>\r\n                                                                <th>Line Association</th>\r\n                                                                <th>Training Validity</th>\r\n                                                                <th>Link Admi UserID</th>\r\n                                                                <th>Reset HMI PIN</th>\r\n                                                                <th>Is Supervisor</th>\r\n                                                                <th>Visitor Management</th>\r\n                                                                <th>Audio Name</th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            {\r\n                                                                this.state.BioUsers.map(user => (\r\n                                                                    <tr onClick={() => this.onClickRow(user.userEid)} data-rowid={user.userEid} >\r\n                                                                        <td>\r\n                                                                            {user.userEid}\r\n                                                                        </td>\r\n                                                                        <td style={{ minWidth: \"190px\" }}>\r\n                                                                            {user.userName}\r\n                                                                        </td>\r\n                                                                        <td style={{ minWidth: \"190px\" }}>\r\n                                                                            <select className=\"form-control\" onChange={this.changeDepartment}>\r\n                                                                                {\r\n                                                                                    this.state.Depts.map(dep => (\r\n                                                                                        user.departmentName === dep.name ?\r\n                                                                                            <option key={dep.code} selected>\r\n                                                                                                {dep.name}\r\n                                                                                            </option>\r\n                                                                                            :\r\n                                                                                            <option key={dep.code}>\r\n                                                                                                {dep.name}\r\n                                                                                            </option>\r\n                                                                                    ))\r\n                                                                                }\r\n                                                                            </select>\r\n                                                                        </td>\r\n                                                                        <td style={{ backgroundColor: user.statusColor }}>\r\n                                                                            {user.status === 1 ?\r\n                                                                                <input type=\"checkbox\" value={user.userEid} onChange={this.ChangeUsersEnable} checked></input>\r\n                                                                                : <input type=\"checkbox\" value={user.userEid} onChange={this.ChangeUsersEnable}></input>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                        <td style={{ backgroundColor: user.activeColor }}>\r\n                                                                            {user.active === 1 ?\r\n                                                                                <input type=\"checkbox\" value={user.userEid} onChange={this.ChangeUsersActive} checked></input>\r\n                                                                                : <input type=\"checkbox\" value={user.userEid} onChange={this.ChangeUsersActive}></input>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                        <td>\r\n                                                                            <button className=\"btn btn-success\"\r\n                                                                                onClick={this.OpenLineAssociationModal} value={user.userEid} >\r\n                                                                                Change</button>\r\n                                                                        </td>\r\n                                                                        <td>\r\n                                                                            <button className=\"btn\" style={{ backgroundColor: user.trgExpColor }}\r\n                                                                                value={user.userEid} onClick={this.openTrainingModal}> {user.trgExpText}</button>\r\n                                                                        </td>\r\n                                                                        <td>\r\n                                                                            <button\r\n                                                                                className={!user.adminUserId ? \"btn btn-success\" : \"btn btn-danger\"}\r\n                                                                                style={{ minWidth: \"100px\", minHeight: \"30px\" }}>{user.adminUserId}</button>\r\n                                                                        </td>\r\n                                                                        <td>\r\n                                                                            <button className=\"btn btn-primary\" value={user.userEid}\r\n                                                                            onClick={this.ResetPINModal}>Reset</button>\r\n                                                                        </td>\r\n                                                                        <td>\r\n                                                                            {user.canCommand === true ?\r\n                                                                                <input type=\"checkbox\" value={user.userEid} onChange={this.ChangeSupervisor} checked></input>\r\n                                                                                : <input type=\"checkbox\" value={user.userEid} onChange={this.ChangeSupervisor}></input>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                        <td>\r\n                                                                            <button className=\"btn btn-success\">{user.visitorMgmt}</button>\r\n                                                                        </td>\r\n                                                                        <td onClick={() => this.onClickRow(user.userEid)}>\r\n                                                                           <input type=\"text\" onchange={this.AudioNameChange} \r\n                                                                           className=\"form-control\" value={user.audioName}></input> \r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                ))}\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </section>\r\n                            <Modal className=\"modal-dialog modal-lg\" style={{ width: \"900px\" }}\r\n                                show={this.state.isTrainngOpen} onHide={this.closeTrainingModal}>\r\n                                <Modal.Header closeButton className=\"modal-header bg-danger white\">\r\n                                    <Modal.Title >\r\n                                        <h4 className=\"\" id=\"myModalLabel10\">Update User Training Details</h4>\r\n                                    </Modal.Title>\r\n                                </Modal.Header>\r\n                                <form onSubmit={e => e.preventDefault()} className=\"col-md-12\">\r\n                                    <Modal.Body className=\"modal-body\">\r\n                                        <div className=\"form-group modal-content\">\r\n                                            <table className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Line Name</th>\r\n                                                        <th>Training Name</th>\r\n                                                        <th>Enabled</th>\r\n                                                        <th>Expiry Date</th>\r\n                                                        <th>Validity Days</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        this.state.Trainings.map(items => (\r\n                                                            <tr>\r\n                                                                <td>{items.lineName}</td>\r\n                                                                <td>{items.trgName}</td>\r\n                                                                <td>{items.enabled === 1 ?\r\n                                                                    <input type=\"checkbox\" checked></input>\r\n                                                                    : <input type=\"checkbox\"></input>\r\n                                                                }</td>\r\n                                                                <td>\r\n                                                                    <DatePicker className=\"form-control\"\r\n                                                                        dateFormat=\"dd-MM-yyyy\"\r\n                                                                        selected={new Date()}\r\n                                                                        showPopperArrow={false}\r\n                                                                        onChange={this.changeExpiryDate} />\r\n                                                                </td>\r\n                                                                <td>{items.expiryDayCount}</td>\r\n                                                            </tr>\r\n                                                        ))\r\n                                                    }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                        <div className=\"alert alert-success\" role=\"alert\" style={{ display: this.state.Alerts }}>\r\n                                            <span className=\"text-bold-600\">Done!</span> You successfully Acknowledged.\r\n                                        </div>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer className=\"modal-footer\">\r\n                                        <Button variant=\"secondary\" onClick={this.closeTrainingModal}> Close </Button>\r\n                                        <Button type=\"Submit\" onClick={() => this.handleSubmitAllAck()} variant=\"secondary\"> Submit </Button>\r\n                                    </Modal.Footer>\r\n                                </form>\r\n                            </Modal>\r\n                            <Modal className=\"modal-dialog modal-lg\" style={{ width: \"900px\" }}\r\n                                show={this.state.islineAssociateOpen} onHide={this.closeLineAssociateModal}>\r\n                                <Modal.Header closeButton className=\"modal-header bg-danger white\">\r\n                                    <Modal.Title >\r\n                                        <h4 className=\"\" id=\"myModalLabel10\">Change Line Association</h4>\r\n                                    </Modal.Title>\r\n                                </Modal.Header>\r\n                                <form onSubmit={e => e.preventDefault()} className=\"col-md-12\">\r\n                                    <Modal.Body className=\"modal-body\">\r\n                                        <div className=\"form-group modal-content\">\r\n                                            <table className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Line Name</th>\r\n                                                        <th>Enabled</th>\r\n\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        this.state.LineAssociate.map(items => (\r\n                                                            <tr>\r\n                                                                <td>{items.lineName}</td>\r\n                                                                <td>{items.enabled == true ?\r\n                                                                    <input type=\"checkbox\" value={items.lineId} defaultChecked={this.state.LAssociatechecked}\r\n                                                                     onClick={this.LineAssociateChange} checked></input>\r\n                                                                    : <input type=\"checkbox\" value={items.lineId} defaultChecked={this.state.LAssociatechecked} \r\n                                                                    onClick={this.LineAssociateChange} style={{backgroundColor:\"red\"}} ></input>\r\n                                                                }</td>\r\n\r\n                                                            </tr>\r\n                                                        ))\r\n                                                    }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                        <div className=\"alert alert-success\" role=\"alert\" style={{ display: this.state.Alerts }}>\r\n                                            <span className=\"text-bold-600\">Done!</span> You successfully Acknowledged.\r\n                                        </div>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer className=\"modal-footer\">\r\n                                        <Button variant=\"secondary\" onClick={this.closeLineAssociateModal}> Close </Button>\r\n                                        <Button type=\"Submit\" onClick={() => this.handleSaveLineAssociate()} variant=\"secondary\"> Submit </Button>\r\n                                    </Modal.Footer>\r\n                                </form>\r\n                            </Modal>\r\n                            <Modal className=\"modal-dialog modal-lg\" style={{ width: \"900px\" }}\r\n                                show={this.state.isPINChangeOpen} onHide={this.closePINChangeModal}>\r\n                                <Modal.Header closeButton className=\"modal-header bg-danger white\">\r\n                                    <Modal.Title >\r\n                                        <h4 className=\"\" id=\"myModalLabel10\">Are you Sure to Reset HMI PIN ? </h4>\r\n                                    </Modal.Title>\r\n                                </Modal.Header>\r\n                                <form onSubmit={e => e.preventDefault()} className=\"col-md-12\">\r\n                                    <Modal.Body className=\"modal-body\">\r\n                                       \r\n                                        <div className=\"alert alert-success\" role=\"alert\" style={{ display: this.state.Alerts }}>\r\n                                            <span className=\"text-bold-600\">Done!</span> PIN Reset successfully.\r\n                                        </div>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer className=\"modal-footer\">\r\n                                        <Button variant=\"secondary\" onClick={this.closePINChangeModal}> Close </Button>\r\n                                        <Button type=\"Submit\" onClick={() => this.ReSetUserHMIPIN()} variant=\"secondary\"> Submit </Button>\r\n                                    </Modal.Footer>\r\n                                </form>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\alarm-acknowledge.component.js",["161","162","163","164"],"import React from 'react';\r\nimport SACSDataServices from '../Services/sacs.services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSync, } from '@fortawesome/free-solid-svg-icons';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nexport default class AlarmHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //this.retriveAlarmHistoryData = this.retriveAlarmHistoryData.bind(this);\r\n        this.state = {\r\n            data: [],\r\n            isAllOpen: false,\r\n            isIndividualOpen: false,\r\n            Alerts: \"none\",\r\n            Remarks: \"\",\r\n            UserId: \"\",\r\n            Id: \"\",\r\n            Message: \"\",\r\n            AllAlrmAckDisable: \"\",\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.retriveAlarmHistoryData();\r\n    }\r\n\r\n    onClick = (e) => {\r\n        SACSDataServices.GetAllPendingAlarms().then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    retriveAlarmHistoryData() {\r\n        SACSDataServices.GetAllPendingAlarms().then(response => {\r\n            \r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            if (response.data == null || response.data == \"\") {\r\n               \r\n                this.setState({\r\n                    AllAlrmAckDisable:\"disable\"\r\n                });\r\n            }\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    handleSubmitAllAck = async (event) => {\r\n        SACSDataServices.SaveAlarmAllAckkowledgement(this.state.Remarks, \"ADMIN123\").then(response => {\r\n            if (response.data == true) {\r\n                this.retriveAlarmHistoryData();\r\n                this.setState({\r\n                    Alerts: \"\",\r\n                    Remarks: \"\"\r\n                })\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    handleSubmitSingleAck = async () => {\r\n        SACSDataServices.SaveAlarmSingleAckkowledgement(this.state.Id, this.state.Remarks, \"ADMIN123\").then(response => {\r\n\r\n            if (response.data == true) {\r\n                this.retriveAlarmHistoryData();\r\n                this.setState({\r\n                    Alerts: \"\",\r\n                    Remarks: \"\"\r\n                })\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onClickRow = (e) => {\r\n        this.setState({\r\n            Id: e\r\n        });\r\n    }\r\n    openAckAllModal = () => this.setState({ isAllOpen: true, Remarks: \"\", Alerts: \"none\" });\r\n    closeAckAllModal = () => this.setState({ isAllOpen: false });\r\n    openAckIndModal = () => this.setState({ isIndividualOpenOpen: true, Remarks: \"\", Alerts: \"none\" });\r\n    closeAckIndModal = () => this.setState({ isIndividualOpenOpen: false });\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Alarm Acknowledgement</h3>\r\n                        </div>\r\n                    </div>\r\n                    <Modal show={this.state.isAllOpen} onHide={this.closeAckAllModal}>\r\n                        <Modal.Header closeButton className=\"modal-header bg-danger white\">\r\n                            <Modal.Title >\r\n                                <h4 className=\"modal-title\" id=\"myModalLabel10\">Confirm to Acknowledge All Active Alarm</h4>\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <form onSubmit={e => e.preventDefault()}>\r\n                            <Modal.Body className=\"modal-body\">\r\n                                <div >\r\n                                    <h4>Please enter remarks </h4>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" value={this.state.Remarks} onChange={e => this.setState({ Remarks: e.target.value })} placeholder=\"Remarks\" minLength=\"6\" className=\"form-control\" required></input>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"alert alert-success\" role=\"alert\" style={{ display: this.state.Alerts }}>\r\n                                    <span className=\"text-bold-600\">Done!</span> You successfully Acknowledged all Alarms.\r\n                                </div>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeAckAllModal}> Close </Button>\r\n                                <Button type=\"Submit\" onClick={() => this.handleSubmitAllAck()} variant=\"secondary\"> Submit </Button>\r\n                            </Modal.Footer>\r\n                        </form>\r\n                    </Modal>\r\n                    <Modal show={this.state.isIndividualOpenOpen} onHide={this.openAckIndModal}>\r\n                        <Modal.Header closeButton className=\"modal-header bg-danger white\">\r\n                            <Modal.Title >\r\n                                <h4 className=\"modal-title text-center\" id=\"myModalLabel10\">Confirm to Acknowledge Alarm</h4>\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <form onSubmit={e => e.preventDefault()}>\r\n                            <Modal.Body className=\"modal-body\">\r\n                                <div >\r\n                                    <h4>Please enter remarks </h4>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" value={this.state.Remarks} onChange={e => this.setState({ Remarks: e.target.value })} placeholder=\"Remarks\" minLength=\"6\" className=\"form-control\" required></input>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"alert alert-success\" role=\"alert\" style={{ display: this.state.Alerts }}>\r\n                                    <span className=\"text-bold-600\">Done!</span> You successfully Acknowledged Alarm.\r\n                                </div>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeAckIndModal}> Close </Button>\r\n                                <Button type=\"Submit\" onClick={() => this.handleSubmitSingleAck()} variant=\"secondary\"> Submit </Button>\r\n                            </Modal.Footer>\r\n                        </form>\r\n                    </Modal>\r\n                    <div className=\"content-body\">\r\n                        <section id=\"horizontal\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-header\">\r\n                                            <div className=\"heading-elements\">\r\n                                                <ul className=\"list-inline mb-0\">\r\n                                                    <li style={{ paddingRight: \"15px\" }}><button onClick={this.openAckAllModal}\r\n                                                        className=\"btn btn-primary\" disabled={this.state.AllAlrmAckDisable} >Acknowledge All Active Alarm</button></li>\r\n                                                    <li><a data-action=\"reload\" onClick={this.onClick}>\r\n                                                        <FontAwesomeIcon icon={faSync}></FontAwesomeIcon></a></li>\r\n                                                    <br></br>\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-content collapse show\">\r\n                                            <div className=\"card-body card-dashboard\">\r\n                                                <table className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Line Name</th>\r\n                                                            <th>Alarm DateTime</th>\r\n                                                            <th>Alarm Tag</th>\r\n                                                            <th>Alarm Description</th>\r\n                                                            <th>Alarm Ack. User</th>\r\n                                                            <th>Alarm Ack. Datetime</th>\r\n                                                            <th>Remarks</th>\r\n                                                            <th>RTN DateTime</th>\r\n                                                            <th>Action</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.data.map(alarm => (\r\n                                                                <tr key={alarm.id} onClick={() => this.onClickRow(alarm.id)} style={{ backgroundColor: alarm.rowColour }}>\r\n                                                                    <td>{alarm.lineName}</td>\r\n                                                                    <td>{alarm.alarmDateTime}</td>\r\n                                                                    <td>{alarm.alarmTag}</td>\r\n                                                                    <td>{alarm.alarmDesc}</td>\r\n                                                                    <td>{alarm.alarmAckUser}</td>\r\n                                                                    <td>{alarm.alarmAckDateTime}</td>\r\n                                                                    <td>{alarm.remarks}</td>\r\n                                                                    <td>{alarm.alarmRtnDateTime}</td>\r\n                                                                    <td><button onClick={this.openAckIndModal} className=\"btn btn-secondary\">Acknowledge</button></td>\r\n                                                                    {/* mr-1 mb-1 btn-secondary btn-sm */}\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\discr.acknow.component.js",["165","166"],"import React from 'react';\r\nimport SACSDataServices from '../Services/sacs.services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSync, } from '@fortawesome/free-solid-svg-icons';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nexport default class AlarmHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.retrivePendingDesrepancy = this.retrivePendingDesrepancy.bind(this);\r\n        this.state = {\r\n            data: [],\r\n            isAllOpen: false,\r\n            isIndividualOpen: false,\r\n            Alerts: \"none\",\r\n            Remarks: \"\",\r\n            UserId: \"\",\r\n            Id: \"\",\r\n            Message: \"\",\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.retrivePendingDesrepancy();\r\n    }\r\n\r\n    onClick = () => {\r\n        SACSDataServices.GetAllPendingDescrepancy().then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    retrivePendingDesrepancy() {\r\n        SACSDataServices.GetAllPendingDescrepancy().then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    handleSubmitSingleAck = async () => {\r\n        SACSDataServices.SaveDesrepancyAcknowledgement(this.state.Id, this.state.Remarks, \"ADMIN123\").then(response => {\r\n            //alert(response.data);\r\n            if (response.data == true) {\r\n                this.retrivePendingDesrepancy();\r\n                this.setState({\r\n                    Alerts: \"\",\r\n                    Remarks: \"\"\r\n                })\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onClickRow = (e) => {\r\n        this.setState({\r\n            Id: e\r\n        });\r\n    }\r\n\r\n    openAckIndModal = () => this.setState({ isIndividualOpenOpen: true });\r\n    closeAckIndModal = () => this.setState({ isIndividualOpenOpen: false });\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Acknowledge Discrepancies</h3>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Modal show={this.state.isIndividualOpenOpen} onHide={this.openAckIndModal}>\r\n                        <Modal.Header closeButton className=\"modal-header bg-danger white\">\r\n                            <Modal.Title >\r\n                                <h4 className=\"modal-title text-center\" id=\"myModalLabel10\">Confirm to Acknowledge Discrepancies</h4>\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <form onSubmit={e => e.preventDefault()}>\r\n                            <Modal.Body className=\"modal-body\">\r\n                                <div >\r\n                                    <h4>Please enter remarks </h4>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" value={this.state.Remarks} onChange={e => this.setState({ Remarks: e.target.value })} placeholder=\"Remarks\" minLength=\"6\" className=\"form-control\" required></input>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"alert alert-success\" role=\"alert\" style={{ display: this.state.Alerts }}>\r\n                                    <span className=\"text-bold-600\">Done!</span> You successfully Acknowledged.\r\n                                </div>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"secondary\" onClick={this.closeAckIndModal}> Close </Button>\r\n                                <Button type=\"Submit\" onClick= {() => this.handleSubmitSingleAck()} variant=\"secondary\"> Submit </Button>\r\n                            </Modal.Footer>\r\n                        </form>\r\n                    </Modal>\r\n                    <div className=\"content-body\">\r\n                        <section id=\"horizontal\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-header\">\r\n                                            <div className=\"heading-elements\">\r\n                                                <ul className=\"list-inline mb-0\">\r\n\r\n                                                    <li><a data-action=\"reload\" onClick={this.onClick}>\r\n                                                        <FontAwesomeIcon icon={faSync}></FontAwesomeIcon></a></li>\r\n                                                    <br></br>\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-content collapse show\">\r\n                                            <div className=\"card-body card-dashboard\">\r\n                                                <table className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>User Name</th>\r\n                                                            <th>Discrepancies DateTime</th>\r\n                                                            <th>Discrepancies Message</th>\r\n                                                            <th>Action</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.data.map(desc => (\r\n                                                                <tr key={desc.id} onClick={() => this.onClickRow(desc.id)}>\r\n                                                                    <td>{desc.userName}</td>\r\n                                                                    <td>{desc.eventTime}</td>\r\n                                                                    <td>{desc.eventMessage}</td>\r\n                                                                    <td><button onClick={this.openAckIndModal} className=\"btn btn-secondary\">Acknowledge</button></td>\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Services\\sacs.services.js",[],"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\http-common.js",[],"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\add.adminuser.component.js",["167","168","169","170","171","172","173"],"import React from 'react';\r\nimport SACSDataServices from '../Services/sacs.services';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSync, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport sacsServices from '../Services/sacs.services';\r\n\r\n\r\nexport default class AdminUserManagement extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //this.retriveAllUsers= this.retriveAllUsers.bind(this);\r\n        this.state = {\r\n            Usres: [],\r\n            UserID: \"\",\r\n            FirstName: \"\",\r\n            LastName: \"\",\r\n            Depatments: [],\r\n            Roles: [],\r\n            Status: -1,\r\n            Message: \"\",\r\n            ShowModal: \"\",\r\n            DeptId: -1,\r\n            RoleId: -1,\r\n            UserIDError: \"\",\r\n            FirstNameerror: \"\",\r\n            LastNameerror: \"\",\r\n            Depterror: \"\",\r\n            Roleerror: \"\",\r\n            Stateerror: \"\",\r\n            AlertType: \"\",\r\n            ShowAlert: \"none\",\r\n            UpdateUserId: \"\",\r\n            DepartmentName: \"\",\r\n            RoleName: \"\",\r\n            EditStatus: \"\",\r\n            ActionName: \"Save\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.retriveAllDepartments();\r\n        this.retriveAllRoles();\r\n        this.retriveAllUsers();\r\n    }\r\n    retriveAllUsers() {\r\n        SACSDataServices.GetAllAdminUsers().then(response => {\r\n            this.setState({\r\n                Usres: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveAllDepartments() {\r\n        SACSDataServices.GetAllDepartments().then(response => {\r\n            this.setState({\r\n                Depatments: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveAllRoles() {\r\n        SACSDataServices.GetAllRoles().then(response => {\r\n            this.setState({\r\n                Roles: response.data\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    changeDepartment = (e) => {\r\n        //alert(e.target.value)\r\n        this.setState({\r\n            DeptId: e.target.value\r\n        })\r\n    }\r\n    UserIdChange = (e) => {\r\n        this.setState({\r\n            UserID: e.target.value\r\n        })\r\n    }\r\n    FirstNameChange = (e) => {\r\n        this.setState({\r\n            FirstName: e.target.value\r\n        })\r\n    }\r\n    lastNameChange = (e) => {\r\n        this.setState({\r\n            LastName: e.target.value\r\n        })\r\n    }\r\n    changeStatus = (e) => {\r\n        this.setState({\r\n            Status: e.target.value\r\n        })\r\n    }\r\n    changeRole = (e) => {\r\n        this.setState({\r\n            RoleId: e.target.value\r\n        })\r\n    }\r\n    SaveUsers = (e) => {\r\n        this.ValicateUsers();\r\n        // e.preventDefault();\r\n        var User = {\r\n            UserID: this.state.UserID,\r\n            FirstName: this.state.FirstName,\r\n            LastName: this.state.LastName,\r\n            DeptId: this.state.RoleId,\r\n            RoleId: this.state.RoleId,\r\n            Status: this.state.Status\r\n        }\r\n        SACSDataServices.SaveAdminUsersDetails(User, this.state.ActionName).then(response => {\r\n            //alert(response.data)\r\n            if (response.data === -1) {\r\n                this.setState({ Message: \"This User ID already exists\", ShowAlert: \"\", AlertType: \"-2\" })\r\n            }\r\n            else if (response.data === 1 && this.state.ActionName === \"Save\") {\r\n                this.setState({ Message: \"User Details Saved Successfully\", ShowAlert: \"\", AlertType: \"1\" })\r\n            }\r\n            else if (response.data === 1 && this.state.ActionName === \"Update\") {\r\n                this.setState({ Message: \"User Details Updated Successfully\", ShowAlert: \"\", AlertType: \"1\" })\r\n\r\n            }\r\n            else {\r\n                this.setState({ Message: \"User Details Saved failed\", ShowAlert: \"\", AlertType: \"-1\" })\r\n            }\r\n            SACSDataServices.GetAllAdminUsers().then(response => {\r\n                this.setState({\r\n                    Usres: response.data\r\n                });\r\n            }).catch(e => {\r\n                console.log(e);\r\n            });\r\n        }).catch(e => {\r\n            // alert(e);\r\n        })\r\n        this.retriveAllUsers();\r\n        e.preventDefault();\r\n    }\r\n    ValicateUsers = () => {       \r\n        if (!this.state.UserID) {\r\n            this.setState({ UserIDError: \"User Id Required\" })\r\n            return false;\r\n        }\r\n        else\r\n            this.setState({ UserIDError: \"\" })\r\n        if (!this.state.FirstName) {\r\n            this.setState({ FirstNameerror: \"User First Name Required\" })\r\n            return false;\r\n        }\r\n        else\r\n            this.setState({ FirstNameerror: \"\" })\r\n        if (!this.state.LastName) {\r\n            this.setState({ LastNameerror: \"User Last Name Required\" })\r\n            return false;\r\n        }\r\n        else\r\n            this.setState({ LastNameerror: \"\" })\r\n        if (this.state.DeptId < 0 || !this.state.DeptId) {\r\n            this.setState({ Depterror: \"Please select User Department\" })\r\n            return false;\r\n        }\r\n        else\r\n            this.setState({ Depterror: \"\" })\r\n        if (this.state.RoleId < 0 || !this.state.RoleId) {\r\n            this.setState({ Roleerror: \"Please select User Role\" })\r\n            return false;\r\n        }\r\n        else\r\n            this.setState({ Roleerror: \"\" })\r\n        if (this.state.Status < 0 || !this.state.Status) {\r\n            this.setState({ Stateerror: \"Please select User Status\" })\r\n            return false;\r\n        }\r\n        else\r\n            this.setState({ Stateerror: \"\" })\r\n        return false;\r\n\r\n    }\r\n    handleEditUser = (e) => {\r\n        //alert(e.target.value)\r\n        //console.log(e.target.value)\r\n    }\r\n    onClickRow = (e) => {\r\n\r\n        this.setState({\r\n            UpdateUserId: e\r\n        })\r\n        sacsServices.GetAdminUserByUserId(e).then(response => {\r\n\r\n            this.setState({\r\n                UserID: response.data.userID,\r\n                FirstName: response.data.firstName,\r\n                LastName: response.data.lastName,\r\n                DepartmentName: response.data.deptName,\r\n                RoleName: response.data.roleName,\r\n                RoleId: response.data.roleId,\r\n                DeptId: response.data.deptId,\r\n                EditStatus: response.data.status,\r\n                ActionName: \"Update\",\r\n                Status: response.data.status,\r\n            })\r\n        }).catch(e => {\r\n            // alert(e);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Admin Users Management </h3>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card\">\r\n                                {/* <div className=\"card-header\">\r\n                                    <h4 className=\"card-title\" id=\"horz-layout-colored-controls\">User Profile</h4>\r\n                                    <a className=\"heading-elements-toggle\"><i className=\"fa fa-ellipsis-v font-medium-3\"></i></a>\r\n                                </div> */}\r\n                                <div className=\"card-content collpase show\">\r\n                                    <div className=\"card-body\">\r\n                                        <form className=\"form form-horizontal\">\r\n                                            <div className=\"form-body\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <div className=\"form-group row\">\r\n                                                            <label className=\"col-md-3 label-control\" for=\"userinput1\">User ID</label>\r\n                                                            <div className=\"col-md-9\">\r\n                                                                <input type=\"text\" onChange={this.UserIdChange} minLength=\"6\" id=\"userinput1\"\r\n                                                                    className=\"form-control border-primary\"\r\n                                                                    placeholder=\"User ID\" name=\"firstname\" \r\n                                                                    disabled={this.state.ActionName==\"Update\"?\"disabled\":\"\"} \r\n                                                                    value={this.state.UserID} required></input>\r\n                                                                <span className=\"text-danger\"> {this.state.UserIDError} </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <div className=\"form-group row\">\r\n                                                            <label className=\"col-md-3 label-control\" for=\"userinput2\">First Name</label>\r\n                                                            <div className=\"col-md-9\">\r\n                                                                <input type=\"text\" id=\"userinput2\" onChange={this.FirstNameChange} className=\"form-control border-primary\"\r\n                                                                    placeholder=\"First Name\" value={this.state.FirstName} name=\"lastname\" required></input>\r\n                                                                <span className=\"text-danger\"> {this.state.FirstNameerror} </span>\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <div className=\"form-group row\">\r\n                                                            <label className=\"col-md-3 label-control\" for=\"userinput2\">Last Name</label>\r\n                                                            <div className=\"col-md-9\">\r\n                                                                <input type=\"text\" id=\"userinput2\" onChange={this.lastNameChange} className=\"form-control border-primary\"\r\n                                                                    placeholder=\"Last Name\" value={this.state.LastName} name=\"lastname\" required></input>\r\n                                                                <span className=\"text-danger\"> {this.state.LastNameerror} </span>\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <div className=\"form-group row\">\r\n                                                            <label className=\"col-md-3 label-control\" for=\"userinput3\">Department</label>\r\n                                                            <div className=\"col-md-9\">\r\n                                                                <select id=\"ddlDeatment\" onChange={this.changeDepartment} className=\"form-control border-primary\" required>\r\n                                                                    <option value=\"-1\">-- Please Select Department -- </option>\r\n                                                                    {\r\n                                                                        this.state.Depatments.map(dep => (\r\n                                                                            this.state.DepartmentName == dep.name ?\r\n                                                                                <option value={dep.code} selected > {dep.name}</option>\r\n                                                                                :\r\n                                                                                <option value={dep.code}> {dep.name}</option>\r\n\r\n                                                                        ))\r\n                                                                    }\r\n                                                                    {/* {this.state.Department.map(dep => (\r\n                                                                    <option key={dep.code}>\r\n                                                                        {dep.name}\r\n                                                                    </option>\r\n                                                                ))} */}\r\n                                                                </select>\r\n                                                                <span className=\"text-danger\"> {this.state.Depterror} </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <div className=\"form-group row\">\r\n                                                            <label className=\"col-md-3 label-control\" for=\"userinput4\">User Role</label>\r\n                                                            <div className=\"col-md-9\">\r\n                                                                <select type=\"dropdown\" id=\"userinput4\"\r\n                                                                    onChange={this.changeRole} className=\"form-control border-primary\"\r\n                                                                    placeholder=\"Nick Name\" name=\"nickname\" required>\r\n                                                                    <option value=\"-1\">-- Please Select Role -- </option>\r\n                                                                    {\r\n                                                                        this.state.RoleName === \"Supervisor\" ?\r\n                                                                            <option value=\"0\" selected>Supervisor</option> : <option value=\"0\">Supervisor</option>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.state.RoleName === \"Manager\" ?\r\n                                                                            <option value=\"1\" selected>Manager</option> : <option value=\"1\">Manager</option>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.state.RoleName === \"Admin\" ?\r\n                                                                            <option value=\"2\" selected>Admin</option> : <option value=\"2\">Admin</option>\r\n                                                                    }\r\n\r\n\r\n                                                                    {/* {this.state.Roles.map(rol => (\r\n                                                                        <option key={rol.code}>\r\n                                                                            {rol.name}\r\n                                                                        </option>\r\n                                                                    ))} */}\r\n                                                                </select>\r\n                                                                <span className=\"text-danger\"> {this.state.Roleerror} </span>\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-4\">\r\n                                                        <div className=\"form-group row\">\r\n                                                            <label className=\"col-md-3 label-control\" for=\"userinput4\">Status</label>\r\n                                                            <div className=\"col-md-9\">\r\n                                                                <select type=\"dropdown\" id=\"userinput4\" onChange={this.changeStatus} className=\"form-control border-primary\"\r\n                                                                    placeholder=\"Nick Name\" name=\"nickname\" required>\r\n                                                                    <option value=\"-1\">-- Please Select Status -- </option>\r\n                                                                    {\r\n                                                                        this.state.EditStatus === \"Enable\" ?\r\n                                                                            <option value=\"1\" selected>Enable</option> : <option value=\"1\">Enable</option>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.state.EditStatus === \"Disable\" ?\r\n                                                                            <option value=\"0\" selected>Disable</option> : <option value=\"0\">Disable</option>\r\n                                                                    }\r\n\r\n                                                                </select>\r\n                                                                <span className=\"text-danger\"> {this.state.Stateerror} </span>\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className={this.state.AlertType == \"1\" ? \"alert alert-success\" : \"alert alert-danger\"} style={{ display: this.state.ShowAlert }} >\r\n                                                <span className=\"text-bold-600\">{this.state.Message} </span>\r\n                                            </div>\r\n                                            <div className=\"form-actions right\">\r\n\r\n                                                <a href=\"/AddUser\"  className=\"btn btn-warning mr-1\">\r\n                                                    <FontAwesomeIcon icon={faTimes}></FontAwesomeIcon>  Cancel\r\n                                                </a>\r\n                                                <button type=\"submit\" onClick={this.SaveUsers} className=\"btn btn-primary\">\r\n                                                    <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon> {this.state.ActionName}\r\n                                                </button>\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">\r\n                                    <h4 className=\"card-title\" id=\"horz-layout-colored-controls\">User Details</h4>\r\n                                    <a className=\"heading-elements-toggle\"><i className=\"fa fa-ellipsis-v font-medium-3\"></i></a>\r\n                                </div>\r\n                                <table className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>User ID</th>\r\n                                            <th>First Name</th>\r\n                                            <th>Last Name</th>\r\n                                            <th> Role</th>\r\n\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            this.state.Usres.map(usr =>\r\n                                                <tr onClick={() => this.onClickRow(usr.userID)} style={{ backgroundColor: usr.rowColour }}>\r\n                                                    <td value={usr.userID} onClick={this.handleEditUser}>{usr.userID}</td>\r\n                                                    <td value={usr.userID} onClick={this.handleEditUser}>{usr.firstName}</td>\r\n                                                    <td value={usr.userID} onClick={this.handleEditUser}>{usr.lastName}</td>\r\n                                                    <td value={usr.userID} onClick={this.handleEditUser}>{usr.role}</td>\r\n\r\n                                                </tr>\r\n                                            )\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}  ","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\auditrail.component.js",["174","175","176"],"D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\configreport.component.js",["177","178"],"import React from 'react';\r\nimport SACSDataServices from '../../Services/sacs.services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import { TablePagination } from \"react-pagination-table\";\r\nimport moment from \"moment\";\r\nimport DatePicker from 'react-datepicker';\r\nimport { faSync, } from '@fortawesome/free-solid-svg-icons';\r\nimport { jsPDF, printHeaderRow } from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\nexport default class AuditTrail extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveConfigChnageDataByDate = this.retriveConfigChnageDataByDate.bind(this);\r\n        this.state = {\r\n            data: [],\r\n            Fromdate: new Date() - 1,\r\n            todate: new Date(),\r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.retriveConfigChnageDataByDate();\r\n        // const [value, onChange] = useState(new Date());\r\n    }\r\n\r\n    onChange = (e) => {\r\n        SACSDataServices.GetConfigurationChangeReportByDate(e.target.value).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onClick = () => {\r\n        this.retriveConfigChnageDataByDate();\r\n    }\r\n\r\n    changeFromDate = (e) => {\r\n\r\n        this.setState({\r\n            Fromdate: e\r\n        });\r\n        SACSDataServices.GetConfigurationChangeReportByDate(moment(e).format(\"DD-MM-yyyy\"), moment(this.state.todate).format(\"DD-MM-yyyy\")).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    changeToDate = (e) => {\r\n\r\n        this.setState({\r\n            todate: e\r\n        });\r\n        SACSDataServices.GetConfigurationChangeReportByDate(moment(this.state.Fromdate).format(\"DD-MM-yyyy\"), moment(e).format(\"DD-MM-yyyy\")).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveConfigChnageDataByDate() {\r\n\r\n        SACSDataServices.GetConfigurationChangeReportByDate(moment(this.state.Fromdate).format(\"DD-MM-yyyy\"), moment(this.state.todate).format(\"DD-MM-yyyy\")).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    generatePDF = () => {\r\n        var doc = new jsPDF('p', 'mm', 'A3');\r\n        doc.page = 1\r\n        var totalPagesExp = doc.internal.getNumberOfPages()        \r\n        \r\n        doc.autoTable({\r\n            html: '#my-table',\r\n            theme: 'grid',\r\n            tableWidth: 250,\r\n            setFontSize:25,\r\n            columnStyles: {\r\n                3: { cellWidth: 'wrap' }\r\n            },\r\n\r\n            //head: headRows(),\r\n            //body: bodyRows(40),\r\n            didDrawPage: function (data) {\r\n                // Header\r\n                doc.setFontSize(20)\r\n                doc.setTextColor(40)\r\n                \r\n                doc.autoTable({\r\n                    html: '#tblHeader',\r\n                    theme: 'grid',\r\n                    tableWidth: 250,\r\n                    columnStyles: {\r\n                        3: { cellWidth: 'wrap' }\r\n                    },\r\n                });\r\n               \r\n                // Footer\r\n                var str = 'Page ' + doc.internal.getNumberOfPages()\r\n                // Total page number plugin only available in jspdf v1.0+\r\n                if (typeof doc.putTotalPages === 'function') {\r\n                    str = str + ' of ' + totalPagesExp\r\n                }\r\n                doc.setFontSize(10)\r\n\r\n                // jsPDF 1.4+ uses getWidth, <1.4 uses .width\r\n                var pageSize = doc.internal.pageSize\r\n                var pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight()\r\n                doc.text(str, data.settings.margin.left, pageHeight - 10)\r\n                doc.page++\r\n            },\r\n            margin: { top: 30 },\r\n        });\r\n        doc.save('ConfigurationChangeReport' + moment(new Date()).format(\"DDMMYYHHmmss\") + '.pdf')\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Configuration Change Report</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content-body\">\r\n                        <section id=\"horizontal\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-header\">\r\n                                            <section className=\"basic-elements\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12\">\r\n                                                        <div className=\"card-content\">\r\n                                                            <div className=\"card-body\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"helpInputTop\">From Date</h4>\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.Fromdate}\r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeFromDate} />\r\n                                                                            {/* <input type=\"text\"  value={moment(this.state.Fromdate).subtract(1, 'days').format(\"DD-MM-YYYY\")}\r\n                                                                                className=\"form-control\" id=\"helpInputTop\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"disabledInput\">To Date</h4>\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.todate}\r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeToDate} />\r\n                                                                            {/* <input type=\"datetime\" value={moment(this.state.todate).format(\"DD-MM-YYYY\")} className=\"form-control\" id=\"disabledInput\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </section>\r\n\r\n\r\n                                            <div className=\"heading-elements\">\r\n                                                <ul className=\"list-inline mb-0\">\r\n                                                    {/* <li><a data-action=\"collapse\" ><FontAwesomeIcon icon={faMinus}></FontAwesomeIcon> </a></li> */}\r\n                                                    <li><a data-action=\"reload\" onClick={this.onClick}> <FontAwesomeIcon icon={faSync}></FontAwesomeIcon></a></li>\r\n                                                    <button className=\"btn btn-primary\" onClick={this.generatePDF} type=\"primary\">Download PDF</button>\r\n                                                    {/* <li><a data-action=\"expand\"><FontAwesomeIcon icon={faWindowMaximize}></FontAwesomeIcon></a></li> */}\r\n                                                    {/* <li><a data-action=\"close\"><FontAwesomeIcon icon={faTimes}></FontAwesomeIcon> </a></li> */}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-content collapse show\">\r\n                                            <table id=\"tblHeader\" style={{display:'none'}} className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                <tr>\r\n                                                    <td rowspan=\"2\" > <br></br>\r\n                                                        <h1>Sunpharma Halol</h1>\r\n                                                    </td>\r\n                                                    <td><h3>Smart Access Control Solution</h3></td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td><h3> System Configuration Change Report</h3></td>\r\n                                                </tr>\r\n                                            </table>\r\n                                            <div className=\"card-body card-dashboard\">\r\n                                                <table id=\"my-table\" className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>DateTime</th>\r\n                                                            <th>User Name</th>\r\n                                                            <th>Message Details</th>\r\n                                                            <th>Remarks</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.data.map(audit => (\r\n                                                                <tr key={audit.id}>\r\n                                                                    <td>{audit.eventTime}</td>\r\n                                                                    <td>{audit.userName}</td>\r\n                                                                    <td>{audit.eventMessage}</td>\r\n                                                                    <td>{audit.remarks}</td>\r\n\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\visitors.report.component.js",["179","180"],"import React from 'react';\r\nimport SACSDataServices from '../../Services/sacs.services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport moment from \"moment\";\r\nimport DatePicker from 'react-datepicker';\r\nimport { faSync, } from '@fortawesome/free-solid-svg-icons';\r\nimport { jsPDF, printHeaderRow } from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\nexport default class AuditTrail extends React.Component {\r\n    constructor(props) {\r\n        super(props);       \r\n        this.retriveVisitorsReportByDate = this.retriveVisitorsReportByDate.bind(this);\r\n        this.state = {    \r\n            data: [],\r\n            Fromdate:new Date()-1,\r\n            todate: new Date(),\r\n        }\r\n    }\r\n    componentDidMount() {      \r\n        this.retriveVisitorsReportByDate();       \r\n    }\r\n    \r\n    onChange = (e) => {\r\n        SACSDataServices.GetVisitorsReportByDate(e.target.value).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onClick = () => {\r\n        this.retriveVisitorsReportByDate();\r\n    }\r\n    \r\n    changeFromDate = (e) => {\r\n      \r\n        this.setState({\r\n            Fromdate: e\r\n        });\r\n        SACSDataServices.GetVisitorsReportByDate(moment(e).format(\"DD-MM-yyyy\"), moment(this.state.todate).format(\"DD-MM-yyyy\")).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    changeToDate= (e) => {\r\n       \r\n        this.setState({\r\n            todate: e\r\n        });\r\n        SACSDataServices.GetVisitorsReportByDate(moment(this.state.Fromdate).format(\"DD-MM-yyyy\"), moment(e).format(\"DD-MM-yyyy\")).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    retriveVisitorsReportByDate() {\r\n        \r\n        SACSDataServices.GetVisitorsReportByDate(moment(this.state.Fromdate).format(\"DD-MM-yyyy\"), moment(this.state.todate).format(\"DD-MM-yyyy\")).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    generatePDF = () => {\r\n        var doc = new jsPDF('p', 'mm', 'A3');\r\n        doc.page = 1\r\n        var totalPagesExp = doc.internal.getNumberOfPages()        \r\n        \r\n        doc.autoTable({\r\n            html: '#my-table',\r\n            theme: 'grid',\r\n            tableWidth: 250,\r\n            setFontSize:25,\r\n            columnStyles: {\r\n                3: { cellWidth: 'wrap' }\r\n            },\r\n\r\n            //head: headRows(),\r\n            //body: bodyRows(40),\r\n            didDrawPage: function (data) {\r\n                // Header\r\n                doc.setFontSize(20)\r\n                doc.setTextColor(40)\r\n                \r\n                doc.autoTable({\r\n                    html: '#tblHeader',\r\n                    theme: 'grid',\r\n                    tableWidth: 250,\r\n                    columnStyles: {\r\n                        3: { cellWidth: 'wrap' }\r\n                    },\r\n                });\r\n               \r\n                // Footer\r\n                var str = 'Page ' + doc.internal.getNumberOfPages()\r\n                // Total page number plugin only available in jspdf v1.0+\r\n                if (typeof doc.putTotalPages === 'function') {\r\n                    str = str + ' of ' + totalPagesExp\r\n                }\r\n                doc.setFontSize(10)\r\n\r\n                // jsPDF 1.4+ uses getWidth, <1.4 uses .width\r\n                var pageSize = doc.internal.pageSize\r\n                var pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight()\r\n                doc.text(str, data.settings.margin.left, pageHeight - 10)\r\n                doc.page++\r\n            },\r\n            margin: { top: 30 },\r\n        });\r\n        doc.save('VisitorsReport' + moment(new Date()).format(\"DDMMYYHHmmss\") + '.pdf')\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Visitor Cards Issue/Return Report</h3>\r\n                        </div>                       \r\n                    </div>\r\n                    <div className=\"content-body\">\r\n                        <section id=\"horizontal\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-header\">\r\n                                            <section className=\"basic-elements\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12\">\r\n                                                        <div className=\"card-content\">\r\n                                                            <div className=\"card-body\">\r\n                                                                <div className=\"row\">                                                            \r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"helpInputTop\">From Date</h4>\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.Fromdate}                                                                                \r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeFromDate}/>\r\n                                                                            {/* <input type=\"text\"  value={moment(this.state.Fromdate).subtract(1, 'days').format(\"DD-MM-YYYY\")}\r\n                                                                                className=\"form-control\" id=\"helpInputTop\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"disabledInput\">To Date</h4>\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.todate}                                                                                \r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeToDate}/>\r\n                                                                            {/* <input type=\"datetime\" value={moment(this.state.todate).format(\"DD-MM-YYYY\")} className=\"form-control\" id=\"disabledInput\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </section>\r\n\r\n\r\n                                            <div className=\"heading-elements\">\r\n                                                <ul className=\"list-inline mb-0\">\r\n                                                    {/* <li><a data-action=\"collapse\" ><FontAwesomeIcon icon={faMinus}></FontAwesomeIcon> </a></li> */}\r\n                                                    <li><a data-action=\"reload\" onClick={this.onClick}> <FontAwesomeIcon icon={faSync}></FontAwesomeIcon></a></li>\r\n                                                    <button className=\"btn btn-primary\" onClick={this.generatePDF} type=\"primary\">Download PDF</button>\r\n                                                    {/* <li><a data-action=\"expand\"><FontAwesomeIcon icon={faWindowMaximize}></FontAwesomeIcon></a></li> */}\r\n                                                    {/* <li><a data-action=\"close\"><FontAwesomeIcon icon={faTimes}></FontAwesomeIcon> </a></li> */}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-content collapse show\">\r\n                                        <table id=\"tblHeader\" style={{display:'none'}} className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                <tr>\r\n                                                    <td rowspan=\"2\" > <br></br>\r\n                                                        <h1>Sunpharma Halol</h1>\r\n                                                    </td>\r\n                                                    <td><h3>Smart Access Control Solution</h3></td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td><h3> Visitor Cards Issue/Return Report</h3></td>\r\n                                                </tr>\r\n                                            </table>\r\n                                            <div className=\"card-body card-dashboard\">\r\n                                                <table id=\"my-table\" className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                    <thead>\r\n                                                        <tr>                                                            \r\n                                                            <th>Issue Date/Time</th>\r\n                                                            <th>Issued By</th>\r\n                                                            <th>Visitor Name</th>                                                            \r\n                                                            <th>Company Name</th>   \r\n                                                            <th>Expiry Date</th>                                                           \r\n                                                            <th>Return By</th>                                                           \r\n                                                            <th>Return Date/Time</th>                                                           \r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.data.map(audit => (\r\n                                                                <tr key={audit.id}>\r\n                                                                    <td>{audit.issueDate}</td>\r\n                                                                    <td>{audit.issuedBy}</td>\r\n                                                                    <td>{audit.visitorName}</td>\r\n                                                                    <td>{audit.companyName}</td>\r\n                                                                    <td>{audit.expDate}</td>\r\n                                                                    <td>{audit.returnBy}</td>\r\n                                                                    <td>{audit.returnDate}</td>                                                                  \r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\Reports\\entryexit.report.component.js",["181","182","183","184","185"],"import React from 'react';\r\nimport SACSDataServices from '../../Services/sacs.services';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport moment from \"moment\";\r\nimport DatePicker from 'react-datepicker';\r\nimport { faSync,faMinus } from '@fortawesome/free-solid-svg-icons';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\r\nimport { jsPDF, printHeaderRow } from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\nexport default class AuditTrail extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveAllLinesDate = this.retriveAllLinesDate.bind(this);\r\n        this.retriveEntryExitReportByDate = this.retriveEntryExitReportByDate.bind(this);\r\n        this.state = {\r\n            Lines: [],\r\n            data: [],\r\n            LineID: 1,\r\n            Fromdate: new Date() - 1,\r\n            todate: new Date(),\r\n            SelectedLineName:\"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.retriveAllLinesDate();\r\n        this.retriveEntryExitReportByDate();\r\n    }\r\n    retriveAllLinesDate() {\r\n        SACSDataServices.GetALlLines().then(response => {           \r\n            this.setState({\r\n                Lines: response.data,\r\n                SelectedLineName: response.data[0].lineName\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onChange = (e) => {\r\n        SACSDataServices.GetEntryExitReportByDate(e.target.value).then(response => {\r\n            this.setState({\r\n                data: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onClick = () => {\r\n        this.retriveEntryExitReportByDate();\r\n    }\r\n    onLineChange = (e) => {\r\n        this.setState({\r\n            LineID: e.target.value\r\n        });        \r\n        SACSDataServices.GetEntryExitReportByDate(moment(e).format(\"DD-MM-yyyy\"),\r\n            moment(this.state.todate).format(\"DD-MM-yyyy\"), e.target.value).then(response => {\r\n                this.setState({\r\n                    data: response.data,\r\n                    SelectedLineName: e.nativeEvent.target[e.target.value - 1].text\r\n                })\r\n                console.log(response.data);\r\n            }).catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    changeFromDate = (e) => {\r\n\r\n        this.setState({\r\n            Fromdate: e\r\n        });\r\n        SACSDataServices.GetEntryExitReportByDate(moment(e).format(\"DD-MM-yyyy\"),\r\n            moment(this.state.todate).format(\"DD-MM-yyyy\"), this.state.LineID).then(response => {\r\n                this.setState({\r\n                    data: response.data\r\n                });\r\n                console.log(response.data);\r\n            }).catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    changeToDate = (e) => {\r\n\r\n        this.setState({\r\n            todate: e\r\n        });\r\n        SACSDataServices.GetEntryExitReportByDate(moment(this.state.Fromdate).format(\"DD-MM-yyyy\"),\r\n            moment(e).format(\"DD-MM-yyyy\"), this.state.LineID).then(response => {\r\n                this.setState({\r\n                    data: response.data\r\n                });\r\n                console.log(response.data);\r\n            }).catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    retriveEntryExitReportByDate() {\r\n\r\n        SACSDataServices.GetEntryExitReportByDate(moment(this.state.Fromdate).format(\"DD-MM-yyyy\"),\r\n            moment(this.state.todate).format(\"DD-MM-yyyy\"), this.state.LineID).then(response => {\r\n                this.setState({\r\n                    data: response.data\r\n                });\r\n                console.log(response.data);\r\n            }).catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    generatePDF = () => {\r\n        var doc = new jsPDF('p', 'mm', 'A3');\r\n        doc.page = 1\r\n        var totalPagesExp = doc.internal.getNumberOfPages()        \r\n        \r\n        doc.autoTable({\r\n            html: '#my-table',\r\n            theme: 'grid',\r\n            tableWidth: 250,\r\n            setFontSize:25,\r\n            columnStyles: {\r\n                3: { cellWidth: 'wrap' }\r\n            },\r\n\r\n            //head: headRows(),\r\n            //body: bodyRows(40),\r\n            didDrawPage: function (data) {\r\n                // Header\r\n                doc.setFontSize(20)\r\n                doc.setTextColor(40)\r\n                \r\n                doc.autoTable({\r\n                    html: '#tblHeader',\r\n                    theme: 'grid',\r\n                    tableWidth: 250,\r\n                    columnStyles: {\r\n                        3: { cellWidth: 'wrap' }\r\n                    },\r\n                });\r\n               \r\n                // Footer\r\n                var str = 'Page ' + doc.internal.getNumberOfPages()\r\n                // Total page number plugin only available in jspdf v1.0+\r\n                if (typeof doc.putTotalPages === 'function') {\r\n                    str = str + ' of ' + totalPagesExp\r\n                }\r\n                doc.setFontSize(10)\r\n\r\n                // jsPDF 1.4+ uses getWidth, <1.4 uses .width\r\n                var pageSize = doc.internal.pageSize\r\n                var pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight()\r\n                doc.text(str, data.settings.margin.left, pageHeight - 10)\r\n                doc.page++\r\n            },\r\n            margin: { top: 30 },\r\n        });\r\n        doc.save('EntryExitReport' + moment(new Date()).format(\"DDMMYYHHmmss\") + '.pdf')\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Entry/Exit Report</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content-body\">\r\n                        <section id=\"horizontal\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-header\">\r\n                                            <section className=\"basic-elements\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12\">\r\n                                                        <div className=\"card-content\">\r\n                                                            <div className=\"card-body\">\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"col-xl-2 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"basicInput\">Select Line</h4>\r\n                                                                            <select id=\"ddlLines\" onChange={this.onLineChange} className=\" form-control\" name=\"ddlLines\"\r\n                                                                                defaultValue={this.state.selectValue} className=\"form-control col-md-12\">\r\n                                                                                {\r\n                                                                                    this.state.Lines.map(lines => (\r\n                                                                                        <option className=\"\" value={lines.id}>\r\n                                                                                            {lines.lineName}\r\n                                                                                        </option>\r\n                                                                                    ))}\r\n                                                                            </select>\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"helpInputTop\">From Date</h4>\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.Fromdate}\r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeFromDate} />\r\n                                                                            {/* <input type=\"text\"  value={moment(this.state.Fromdate).subtract(1, 'days').format(\"DD-MM-YYYY\")}\r\n                                                                                className=\"form-control\" id=\"helpInputTop\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n                                                                    <div className=\"col-xl-3 col-lg-6 col-md-12 mb-1\">\r\n                                                                        <fieldset className=\"form-group\">\r\n                                                                            <h4 for=\"disabledInput\">To Date</h4>\r\n                                                                            <DatePicker className=\"form-control\"\r\n                                                                                selected={this.state.todate}\r\n                                                                                showPopperArrow={false}\r\n                                                                                onChange={this.changeToDate} />\r\n                                                                            {/* <input type=\"datetime\" value={moment(this.state.todate).format(\"DD-MM-YYYY\")} className=\"form-control\" id=\"disabledInput\"></input> */}\r\n                                                                        </fieldset>\r\n                                                                    </div>\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </section>\r\n\r\n\r\n                                            <div className=\"heading-elements\">\r\n                                                <ul className=\"list-inline mb-0\">\r\n                                                    <li><a data-action=\"collapse\" onClick={this.OrderComponent} ><FontAwesomeIcon icon={faMinus}></FontAwesomeIcon> </a></li>\r\n                                                    <li><a data-action=\"reload\" onClick={this.onClick}> <FontAwesomeIcon icon={faSync}></FontAwesomeIcon></a></li>\r\n                                                    <button className=\"btn btn-primary\" onClick={this.generatePDF} type=\"primary\">Download PDF</button>\r\n                                                    {/* <li><a data-action=\"expand\"><FontAwesomeIcon icon={faWindowMaximize}></FontAwesomeIcon></a></li> */}\r\n                                                    {/* <li><a data-action=\"close\"><FontAwesomeIcon icon={faTimes}></FontAwesomeIcon> </a></li> */}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"card-content collapse show\">\r\n                                        <table id=\"tblHeader\" style={{display:'none'}} className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                    <tr>\r\n                                                        <td rowspan=\"2\" > <br></br>\r\n                                                            <h1>Sunpharma Halol</h1>\r\n                                                        </td>\r\n                                                        <td><h3>Smart Access Control Solution</h3></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td><h3> {this.state.SelectedLineName}  Entry / Exit Report</h3></td>\r\n                                                    </tr>\r\n                                                </table>\r\n                                            <div className=\"card-body card-dashboard table-responsive\">                                               \r\n                                                <table id=\"my-table\" className=\"table display nowrap table-striped table-bordered scroll-horizontal\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Personnel Name</th>\r\n                                                            <th>Employee ID</th>\r\n                                                            <th>Dept.</th>\r\n                                                            <th>Entry Date/Time</th>\r\n                                                            <th>Entry Count</th>\r\n                                                            <th>Exit Date/Time</th>\r\n                                                            <th>Duration(HH:MM)</th>\r\n                                                            <th>Purpose of Entry </th>\r\n                                                            <th>Exit Reader</th>\r\n                                                            <th>Remarks</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            this.state.data.map(audit => (\r\n                                                                <tr key={audit.id}>\r\n                                                                    <td>{audit.userName}</td>\r\n                                                                    <td>{audit.userEid}</td>\r\n                                                                    <td>{audit.userDept}</td>\r\n\r\n                                                                    <td>{audit.inTime}</td>\r\n                                                                    <td>{audit.inCount}</td>\r\n                                                                    <td>{audit.outTime}</td>\r\n                                                                    <td>{audit.timeDuration}</td>\r\n                                                                    <td>{audit.inPurpose}</td>\r\n                                                                    <td>{audit.outDevice}</td>\r\n                                                                    <td>{audit.outPurpose}</td>\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n      flexDirection: 'row',\r\n      backgroundColor: '#E4E4E4'\r\n    },\r\n    section: {\r\n      margin: 10,\r\n      padding: 10,\r\n      flexGrow: 1\r\n    }\r\n  });\r\n  \r\n  // Create Document Component\r\n  const MyDocument = () => (\r\n    <Document>\r\n      <Page size=\"A4\" style={styles.page}>\r\n        <View style={styles.section}>\r\n          <Text>Section #1</Text>\r\n        </View>\r\n        <View style={styles.section}>\r\n          <Text>Section #2</Text>\r\n        </View>\r\n      </Page>\r\n    </Document>\r\n  );\r\n  const OrderComponent = () => (\r\n    <PDFViewer>\r\n      <MyDocument />\r\n    </PDFViewer>\r\n  );","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\lineconfiguration.component.js",["186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"import React, { Component } from \"react\";\r\nimport SACSDataServices from \"../Services/sacs.services\";\r\n\r\n\r\nexport default class LineConfiguration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.retriveAllLinesDate = this.retriveAllLinesDate.bind(this);\r\n        this.retriveConfigurations = this.retriveConfigurations.bind(this);\r\n        this.state = {\r\n            Lines: [],\r\n            Config: [],\r\n            LineID: 1,\r\n            Fromdate: new Date() - 1,\r\n            todate: new Date(),\r\n            MandatoryOutTime: \"\",\r\n            MaxStayTime: \"\",\r\n            Alert1Duration: \"\",\r\n            Alert2Duration: \"\",\r\n            Alert3Duration: \"\",\r\n            HasSubLines: \"\",\r\n            MaxCount: \"\",\r\n            CurrentCount: \"\",\r\n            DisableControl: \"\",\r\n            Alert1Enabled: \"\",\r\n            Alert2Enabled: \"\",\r\n            Alert3Enabled: \"\",\r\n            Message: \"\",\r\n            Error: \"none\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.retriveAllLinesDate();\r\n        this.retriveConfigurations();\r\n    }\r\n    retriveAllLinesDate() {\r\n        SACSDataServices.GetALlLines().then(response => {\r\n            this.setState({\r\n                Lines: response.data\r\n            });\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    onLineChange = (e) => {\r\n\r\n        this.setState({\r\n            LineID: e.target.value\r\n        });\r\n        SACSDataServices.GetLineConfigurationByLineId(e.target.value).then(response => {\r\n            this.setState({\r\n                // Config: response.data,\r\n                MandatoryOutTime: response.data.mandatoryOutTime,\r\n                MaxStayTime: response.data.maxStayTime,\r\n                Alert1Duration: response.data.alert1Duration,\r\n                Alert2Duration: response.data.alert2Duration,\r\n                Alert3Duration: response.data.alert3Duration,\r\n                HasSubLines: response.data.hasSubLine,\r\n                MaxCount: response.data.maxCount,\r\n                CurrentCount: response.data.currentCount,\r\n                DisableControl: response.data.hasSubLines\r\n            })\r\n\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    retriveConfigurations() {\r\n        SACSDataServices.GetLineConfigurationByLineId(this.state.LineID).then(response => {\r\n            this.setState({\r\n                // Config: response.data,\r\n                MandatoryOutTime: response.data.mandatoryOutTime,\r\n                MaxStayTime: response.data.maxStayTime,\r\n                Alert1Duration: response.data.alert1Duration,\r\n                Alert2Duration: response.data.alert2Duration,\r\n                Alert3Duration: response.data.alert3Duration,\r\n                HasSubLines: response.data.hasSubLine,\r\n                MaxCount: response.data.maxCount,\r\n                CurrentCount: response.data.currentCount,\r\n                DisableControl: response.data.hasSubLines\r\n            })\r\n\r\n            console.log(response.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n    handleSaveDate = () => {\r\n        \r\n        var data = {\r\n            MandatoryOutTime: this.state.MandatoryOutTime,\r\n            MaxStayTime: this.state.MaxStayTime,\r\n            Alert1Duration: this.state.Alert1Duration,\r\n            Alert2Duration: this.state.Alert2Duration,\r\n            Alert3Duration: this.state.Alert3Duration,\r\n            HasSubLines: this.state.HasSubLines,\r\n            MaxCount: this.state.MaxCount,\r\n            CurrentCount: this.state.CurrentCount,\r\n        };\r\n       \r\n        SACSDataServices.SaveLineConfigurations(data, this.state.LineID, \"Mactus123\").then(response => {\r\n           \r\n            if (response.data != \"Ok\" && response.data != null && response.data != \"\") {\r\n                this.setState({\r\n                    Error: \"\",\r\n                    Message: response.data\r\n                })\r\n            }\r\n            else if (response.data == \"Ok\" && response.data != null && response.data != \"\") {\r\n                this.setState({\r\n                    Error: \"\",\r\n                    Message: \"Data Update Successfully \"\r\n                })\r\n            }\r\n            else if (response.data == null || response.data == \"\") {\r\n                this.setState({\r\n                    Error: \"\",\r\n                    Message: \"No Changes in Data \"\r\n                })\r\n            }\r\n        }).catch(e => {\r\n            console.log(e)\r\n        })\r\n    }\r\n   \r\n    mandateOutChnage = (e) => {\r\n        this.setState({\r\n            MandatoryOutTime: e.target.value\r\n        })\r\n    }\r\n    maxStayChange = (e) => {\r\n        this.setState({\r\n            MaxStayTime: e.target.value\r\n        })\r\n    }\r\n    thirdWarningChange = (e) => {\r\n        this.setState({\r\n            Alert3Duration: e.target.value\r\n        })\r\n    }\r\n    secondWarningChange = (e) => {\r\n        this.setState({\r\n            Alert2Duration: e.target.value\r\n        })\r\n    }\r\n    firstWarningChange = (e) => {\r\n        this.setState({\r\n            Alert1Duration: e.target.value\r\n        })\r\n    }\r\n    maxCountChange = (e) => {\r\n        this.setState({\r\n            MaxCount: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-content content\">\r\n                <div className=\"content-overlay\"></div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content-header row\">\r\n                        <div className=\"content-header-left col-md-6 col-12 mb-2\">\r\n                            <h3 className=\"content-header-title mb-0\">Line Configurations </h3>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"content-body\">\r\n                        <section id=\"form-control-repeater\">\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-12\">\r\n                                    <div class=\"card\">\r\n                                        <div class=\"card-header\">\r\n                                            <div class=\"form-group col-md-12 mb-2 row\" style={{ paddingTop: \"10px\" }}>\r\n                                                <div class=\"form-group col-md-1 mb-2\">\r\n                                                    <span >Select Line</span>\r\n                                                </div>\r\n                                                <div class=\"form-group col-md-2 mb-2\">\r\n                                                    <select className=\"form-control\"  defaultValue={this.state.selectValue} onChange={this.onLineChange}>\r\n                                                        {\r\n                                                            this.state.Lines.map(lines => (\r\n                                                                <option className=\"\" value={lines.id}>\r\n                                                                    {lines.lineName}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"card-content collapse show\">\r\n\r\n                                            <div class=\"card-body\">\r\n                                                <h4 class=\"card-title\" id=\"file-repeater\">Voice Alert Setting(Minutes)</h4>\r\n                                                {\r\n                                                    <form class=\"form row\" onSubmit={e => e.preventDefault()}>\r\n                                                        <div className=\"col-md-6 row\">\r\n                                                            <div class=\"form-group col-md-4 mb-2\">\r\n                                                                <span>Mandatory Out Duration</span>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-2 mb-2\">\r\n                                                                <input type=\"number\" min=\"0\" disabled={this.state.DisableControl == \"1\" ? \"disabled\" : \"\"}\r\n                                                                    class=\"form-control\" value={this.state.MandatoryOutTime}\r\n                                                                    onChange={this.mandateOutChnage} required></input>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-4 mb-2\">\r\n                                                                <span >Maximum Stay Duration</span>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-2 mb-2\">\r\n                                                                <input type=\"number\" value={this.state.MaxStayTime}\r\n                                                                    disabled={this.state.DisableControl == \"1\" ? \"disabled\" : \"\"}\r\n                                                                    min=\"0\" onChange={this.maxStayChange} class=\"form-control\" required ></input>\r\n                                                            </div>\r\n\r\n                                                            <div class=\"form-group col-md-4 mb-2\">\r\n                                                                <span >Third Warning Duration</span>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-2 mb-2\">\r\n                                                                <input type=\"number\" min=\"0\" onChange={this.thirdWarningChange}\r\n                                                                    disabled={this.state.Alert1Enabled == \"0\" ? \"disabled\" : \"\"}\r\n                                                                    value={this.state.Alert3Duration} class=\"form-control\" required ></input>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-4 mb-2\">\r\n                                                                <span >Second Warning Duration</span>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-2 mb-2\">\r\n                                                                <input type=\"number\" min=\"0\" onChange={this.secondWarningChange}\r\n                                                                    disabled={this.state.Alert1Enabled == \"0\" ? \"disabled\" : \"\"}\r\n                                                                    value={this.state.Alert2Duration} class=\"form-control\" required ></input>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-4 mb-2\">\r\n                                                                <span >First Warning Duration</span>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-2 mb-2\">\r\n                                                                <input type=\"number\" min=\"0\" onChange={this.firstWarningChange}\r\n                                                                    disabled={this.state.DisableControl == \"1\" ? \"disabled\" : \"\" || this.state.Alert1Enabled == \"0\" ? \"disabled\" : \"\"}\r\n                                                                    value={this.state.Alert1Duration} class=\"form-control\" required ></input>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"col-md-6 row\" >\r\n\r\n                                                            <div class=\"form-group col-md-4 mb-2\">\r\n                                                                <span >Maxmimum Count</span>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-2 mb-2\">\r\n                                                                <input type=\"number\" min=\"0\" value={this.state.MaxCount}\r\n                                                                    class=\"form-control\" onChange={this.maxCountChange}\r\n                                                                    required></input>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-4 mb-2\">\r\n                                                                <span >Current Count</span>\r\n                                                            </div>\r\n                                                            <div class=\"form-group col-md-2 mb-2\">\r\n                                                                <input type=\"number\" min=\"0\" value={this.state.CurrentCount}\r\n                                                                    class=\"form-control\"\r\n                                                                    disabled required></input>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <div class=\"form-group col-12 mb-2 text-center\">\r\n                                                            <button type=\"submit\" onClick={this.handleSaveDate}\r\n                                                                data-repeater-create class=\"btn btn-primary\"> Update</button>\r\n\r\n                                                            <div style={{ display: this.state.Error }}  class={this.state.Message!=\"Ok\"?\r\n                                                            \"alert alert-danger alert-dismissible mb-2\":\"alert alert-success alert-dismissible mb-2\"} role=\"alert\">\r\n                                                                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                                                    <span aria-hidden=\"true\">×</span>\r\n                                                                </button>\r\n                                                                <strong></strong> {this.state.Message}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div class=\"col-md-6\" style={{ display: \"none\" }}>\r\n                                    <div class=\"card\">\r\n                                        <div class=\"card-header\">\r\n                                            <h4 class=\"card-title\" id=\"tel-repeater\">Maximum Count Settings </h4>\r\n                                            <a class=\"heading-elements-toggle\"><i class=\"icon-ellipsis font-medium-3\"></i></a>\r\n                                            <div class=\"heading-elements\">\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"card-content collapse show\">\r\n                                            <div class=\"card-body\">\r\n                                                {\r\n                                                    <form class=\"row\">\r\n                                                        <div class=\"form-group col-md-4 mb-2\">\r\n                                                            <span >Maxmimum Count</span>\r\n                                                        </div>\r\n                                                        <div class=\"form-group col-md-2 mb-2\">\r\n                                                            <input type=\"number\" min=\"0\" value={this.state.MaxCount}\r\n                                                                class=\"form-control\" onChange={this.handleInputChange}\r\n                                                                required></input>\r\n                                                        </div>\r\n                                                        <div class=\"form-group col-md-4 mb-2\">\r\n                                                            <span >Current Count</span>\r\n                                                        </div>\r\n                                                        <div class=\"form-group col-md-2 mb-2\">\r\n                                                            <input type=\"number\" min=\"0\" value={this.state.CurrentCount}\r\n                                                                onChange={this.handleInputChange} class=\"form-control\"\r\n                                                                disabled required></input>\r\n                                                        </div>\r\n                                                        <div class=\"form-group col-12 mb-2 text-center\">\r\n                                                            <button type=\"submit\" data-repeater-create class=\"btn btn-primary\"> Update</button>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\Sources\\SACSCLIENT\\sacsclient-mactus\\src\\Components\\checkList.component.js",["200","201","202","203","204","205"],{"ruleId":"206","severity":1,"message":"207","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"206","severity":1,"message":"214","line":2,"column":17,"nodeType":"208","messageId":"209","endLine":2,"endColumn":21},{"ruleId":"206","severity":1,"message":"215","line":1,"column":8,"nodeType":"208","messageId":"209","endLine":1,"endColumn":12},{"ruleId":"206","severity":1,"message":"216","line":5,"column":10,"nodeType":"208","messageId":"209","endLine":5,"endColumn":16},{"ruleId":"206","severity":1,"message":"217","line":6,"column":8,"nodeType":"208","messageId":"209","endLine":6,"endColumn":14},{"ruleId":"206","severity":1,"message":"218","line":7,"column":10,"nodeType":"208","messageId":"209","endLine":7,"endColumn":22},{"ruleId":"219","severity":1,"message":"220","line":82,"column":89,"nodeType":"221","endLine":82,"endColumn":160},{"ruleId":"219","severity":1,"message":"220","line":87,"column":37,"nodeType":"221","endLine":87,"endColumn":108},{"ruleId":"206","severity":1,"message":"214","line":3,"column":10,"nodeType":"208","messageId":"209","endLine":3,"endColumn":14},{"ruleId":"206","severity":1,"message":"222","line":3,"column":16,"nodeType":"208","messageId":"209","endLine":3,"endColumn":24},{"ruleId":"206","severity":1,"message":"223","line":4,"column":10,"nodeType":"208","messageId":"209","endLine":4,"endColumn":18},{"ruleId":"206","severity":1,"message":"224","line":4,"column":46,"nodeType":"208","messageId":"209","endLine":4,"endColumn":50},{"ruleId":"206","severity":1,"message":"225","line":4,"column":51,"nodeType":"208","messageId":"209","endLine":4,"endColumn":62},{"ruleId":"206","severity":1,"message":"226","line":4,"column":64,"nodeType":"208","messageId":"209","endLine":4,"endColumn":70},{"ruleId":"206","severity":1,"message":"227","line":6,"column":10,"nodeType":"208","messageId":"209","endLine":6,"endColumn":23},{"ruleId":"206","severity":1,"message":"228","line":39,"column":17,"nodeType":"208","messageId":"209","endLine":39,"endColumn":23},{"ruleId":"206","severity":1,"message":"229","line":39,"column":25,"nodeType":"208","messageId":"209","endLine":39,"endColumn":33},{"ruleId":"230","severity":1,"message":"231","line":49,"column":31,"nodeType":"232","messageId":"233","endLine":49,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":105,"column":80,"nodeType":"232","messageId":"233","endLine":105,"endColumn":82},{"ruleId":"230","severity":1,"message":"231","line":277,"column":63,"nodeType":"232","messageId":"233","endLine":277,"endColumn":65},{"ruleId":"230","severity":1,"message":"234","line":287,"column":35,"nodeType":"232","messageId":"233","endLine":287,"endColumn":37},{"ruleId":"230","severity":1,"message":"231","line":347,"column":90,"nodeType":"232","messageId":"233","endLine":347,"endColumn":92},{"ruleId":"230","severity":1,"message":"231","line":363,"column":88,"nodeType":"232","messageId":"233","endLine":363,"endColumn":90},{"ruleId":"219","severity":1,"message":"235","line":430,"column":41,"nodeType":"221","endLine":430,"endColumn":44},{"ruleId":"219","severity":1,"message":"235","line":520,"column":41,"nodeType":"221","endLine":520,"endColumn":75},{"ruleId":"219","severity":1,"message":"235","line":525,"column":41,"nodeType":"221","endLine":525,"endColumn":75},{"ruleId":"219","severity":1,"message":"235","line":530,"column":41,"nodeType":"221","endLine":530,"endColumn":44},{"ruleId":"236","severity":1,"message":"237","line":542,"column":108,"nodeType":"238","messageId":"239","endLine":542,"endColumn":109},{"ruleId":"230","severity":1,"message":"231","line":582,"column":75,"nodeType":"232","messageId":"233","endLine":582,"endColumn":77},{"ruleId":"206","severity":1,"message":"240","line":611,"column":7,"nodeType":"208","messageId":"209","endLine":611,"endColumn":24},{"ruleId":"206","severity":1,"message":"241","line":642,"column":7,"nodeType":"208","messageId":"209","endLine":642,"endColumn":21},{"ruleId":"206","severity":1,"message":"242","line":737,"column":7,"nodeType":"208","messageId":"209","endLine":737,"endColumn":16},{"ruleId":"243","severity":1,"message":"244","line":754,"column":5,"nodeType":"245","messageId":"233","endLine":756,"endColumn":6},{"ruleId":"206","severity":1,"message":"246","line":832,"column":7,"nodeType":"208","messageId":"209","endLine":832,"endColumn":16},{"ruleId":"230","severity":1,"message":"231","line":884,"column":63,"nodeType":"232","messageId":"233","endLine":884,"endColumn":65},{"ruleId":"247","severity":1,"message":"248","line":1053,"column":5,"nodeType":"245","messageId":"249","endLine":1055,"endColumn":6},{"ruleId":"236","severity":1,"message":"237","line":1063,"column":77,"nodeType":"238","messageId":"239","endLine":1063,"endColumn":78},{"ruleId":"206","severity":1,"message":"250","line":53,"column":14,"nodeType":"208","messageId":"209","endLine":53,"endColumn":22},{"ruleId":"251","severity":1,"message":"252","line":157,"column":28,"nodeType":"221","endLine":157,"endColumn":50},{"ruleId":"206","severity":1,"message":"253","line":6,"column":17,"nodeType":"208","messageId":"209","endLine":6,"endColumn":31},{"ruleId":"254","severity":1,"message":"255","line":158,"column":81,"nodeType":"256","endLine":158,"endColumn":105},{"ruleId":"254","severity":1,"message":"255","line":159,"column":81,"nodeType":"256","endLine":159,"endColumn":115},{"ruleId":"219","severity":1,"message":"235","line":205,"column":57,"nodeType":"221","endLine":205,"endColumn":104},{"ruleId":"230","severity":1,"message":"231","line":36,"column":31,"nodeType":"232","messageId":"233","endLine":36,"endColumn":33},{"ruleId":"230","severity":1,"message":"231","line":38,"column":36,"nodeType":"232","messageId":"233","endLine":38,"endColumn":38},{"ruleId":"219","severity":1,"message":"235","line":90,"column":41,"nodeType":"221","endLine":90,"endColumn":80},{"ruleId":"219","severity":1,"message":"235","line":94,"column":53,"nodeType":"221","endLine":94,"endColumn":100},{"ruleId":"236","severity":1,"message":"237","line":114,"column":109,"nodeType":"238","messageId":"239","endLine":114,"endColumn":110},{"ruleId":"230","severity":1,"message":"231","line":124,"column":141,"nodeType":"232","messageId":"233","endLine":124,"endColumn":143},{"ruleId":"206","severity":1,"message":"257","line":5,"column":10,"nodeType":"208","messageId":"209","endLine":5,"endColumn":18},{"ruleId":"230","severity":1,"message":"231","line":189,"column":29,"nodeType":"232","messageId":"233","endLine":189,"endColumn":31},{"ruleId":"230","severity":1,"message":"231","line":452,"column":84,"nodeType":"232","messageId":"233","endLine":452,"endColumn":86},{"ruleId":"230","severity":1,"message":"231","line":44,"column":56,"nodeType":"232","messageId":"233","endLine":44,"endColumn":58},{"ruleId":"230","severity":1,"message":"231","line":58,"column":31,"nodeType":"232","messageId":"233","endLine":58,"endColumn":33},{"ruleId":"230","severity":1,"message":"231","line":72,"column":31,"nodeType":"232","messageId":"233","endLine":72,"endColumn":33},{"ruleId":"219","severity":1,"message":"235","line":161,"column":57,"nodeType":"221","endLine":161,"endColumn":104},{"ruleId":"230","severity":1,"message":"231","line":51,"column":31,"nodeType":"232","messageId":"233","endLine":51,"endColumn":33},{"ruleId":"219","severity":1,"message":"235","line":115,"column":57,"nodeType":"221","endLine":115,"endColumn":104},{"ruleId":"206","severity":1,"message":"258","line":3,"column":10,"nodeType":"208","messageId":"209","endLine":3,"endColumn":15},{"ruleId":"206","severity":1,"message":"226","line":3,"column":17,"nodeType":"208","messageId":"209","endLine":3,"endColumn":23},{"ruleId":"206","severity":1,"message":"259","line":5,"column":10,"nodeType":"208","messageId":"209","endLine":5,"endColumn":16},{"ruleId":"230","severity":1,"message":"231","line":240,"column":100,"nodeType":"232","messageId":"233","endLine":240,"endColumn":102},{"ruleId":"230","severity":1,"message":"231","line":278,"column":103,"nodeType":"232","messageId":"233","endLine":278,"endColumn":105},{"ruleId":"230","severity":1,"message":"231","line":352,"column":82,"nodeType":"232","messageId":"233","endLine":352,"endColumn":84},{"ruleId":"219","severity":1,"message":"235","line":375,"column":37,"nodeType":"221","endLine":375,"endColumn":76},{"ruleId":"206","severity":1,"message":"253","line":8,"column":17,"nodeType":"208","messageId":"209","endLine":8,"endColumn":31},{"ruleId":"206","severity":1,"message":"260","line":114,"column":21,"nodeType":"208","messageId":"209","endLine":114,"endColumn":32},{"ruleId":"219","severity":1,"message":"235","line":201,"column":57,"nodeType":"221","endLine":201,"endColumn":104},{"ruleId":"206","severity":1,"message":"253","line":8,"column":17,"nodeType":"208","messageId":"209","endLine":8,"endColumn":31},{"ruleId":"219","severity":1,"message":"235","line":184,"column":57,"nodeType":"221","endLine":184,"endColumn":104},{"ruleId":"206","severity":1,"message":"253","line":7,"column":17,"nodeType":"208","messageId":"209","endLine":7,"endColumn":31},{"ruleId":"219","severity":1,"message":"235","line":181,"column":57,"nodeType":"221","endLine":181,"endColumn":104},{"ruleId":"206","severity":1,"message":"253","line":9,"column":17,"nodeType":"208","messageId":"209","endLine":9,"endColumn":31},{"ruleId":"254","severity":1,"message":"255","line":186,"column":119,"nodeType":"256","endLine":186,"endColumn":153},{"ruleId":"219","severity":1,"message":"235","line":228,"column":57,"nodeType":"221","endLine":228,"endColumn":114},{"ruleId":"219","severity":1,"message":"235","line":229,"column":57,"nodeType":"221","endLine":229,"endColumn":104},{"ruleId":"206","severity":1,"message":"261","line":322,"column":9,"nodeType":"208","messageId":"209","endLine":322,"endColumn":23},{"ruleId":"206","severity":1,"message":"207","line":1,"column":17,"nodeType":"208","messageId":"209","endLine":1,"endColumn":26},{"ruleId":"230","severity":1,"message":"234","line":106,"column":31,"nodeType":"232","messageId":"233","endLine":106,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":106,"column":81,"nodeType":"232","messageId":"233","endLine":106,"endColumn":83},{"ruleId":"230","severity":1,"message":"231","line":112,"column":36,"nodeType":"232","messageId":"233","endLine":112,"endColumn":38},{"ruleId":"230","severity":1,"message":"234","line":112,"column":86,"nodeType":"232","messageId":"233","endLine":112,"endColumn":88},{"ruleId":"230","severity":1,"message":"231","line":118,"column":61,"nodeType":"232","messageId":"233","endLine":118,"endColumn":63},{"ruleId":"230","severity":1,"message":"231","line":203,"column":130,"nodeType":"232","messageId":"233","endLine":203,"endColumn":132},{"ruleId":"230","severity":1,"message":"231","line":212,"column":105,"nodeType":"232","messageId":"233","endLine":212,"endColumn":107},{"ruleId":"230","severity":1,"message":"231","line":221,"column":104,"nodeType":"232","messageId":"233","endLine":221,"endColumn":106},{"ruleId":"230","severity":1,"message":"231","line":229,"column":104,"nodeType":"232","messageId":"233","endLine":229,"endColumn":106},{"ruleId":"230","severity":1,"message":"231","line":237,"column":105,"nodeType":"232","messageId":"233","endLine":237,"endColumn":107},{"ruleId":"230","severity":1,"message":"231","line":237,"column":158,"nodeType":"232","messageId":"233","endLine":237,"endColumn":160},{"ruleId":"230","severity":1,"message":"234","line":265,"column":130,"nodeType":"232","messageId":"233","endLine":265,"endColumn":132},{"ruleId":"219","severity":1,"message":"235","line":284,"column":45,"nodeType":"221","endLine":284,"endColumn":80},{"ruleId":"206","severity":1,"message":"259","line":4,"column":10,"nodeType":"208","messageId":"209","endLine":4,"endColumn":16},{"ruleId":"206","severity":1,"message":"262","line":5,"column":8,"nodeType":"208","messageId":"209","endLine":5,"endColumn":14},{"ruleId":"230","severity":1,"message":"231","line":51,"column":31,"nodeType":"232","messageId":"233","endLine":51,"endColumn":33},{"ruleId":"254","severity":1,"message":"255","line":87,"column":119,"nodeType":"256","endLine":87,"endColumn":153},{"ruleId":"254","severity":1,"message":"255","line":168,"column":89,"nodeType":"256","endLine":168,"endColumn":124},{"ruleId":"254","severity":1,"message":"255","line":173,"column":89,"nodeType":"256","endLine":173,"endColumn":124},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-native-reassign",["263"],"no-negated-in-lhs",["264"],"'Link' is defined but never used.","'logo' is defined but never used.","'render' is defined but never used.","'avatar' is defined but never used.","'isThisSecond' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Redirect' is defined but never used.","'Dropdown' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'faAddressCard' is defined but never used.","'UserId' is assigned a value but never used.","'Password' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'MaxCountComponent' is defined but never used.","'CurrentInUsers' is defined but never used.","'Bioreader' is defined but never used.","no-dupe-class-members","Duplicate name 'componentWillUnmount'.","MethodDefinition","'HMIStatus' is defined but never used.","no-useless-constructor","Useless constructor.","noUselessConstructor","'footRows' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'printHeaderRow' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'Modal' is defined but never used.","'faSync' is defined but never used.","'printredate' is assigned a value but never used.","'OrderComponent' is assigned a value but never used.","'moment' is defined but never used.","no-global-assign","no-unsafe-negation"]